
Alarm Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001a24  08001a24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001a24  08001a24  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001a24  08001a24  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a24  08001a24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08001a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000080  08001aac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001aac  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000101b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a9  00000000  00000000  000210c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00021570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00021780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025c9  00000000  00000000  00021948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000214f  00000000  00000000  00023f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000885d  00000000  00000000  00026060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e8bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ec  00000000  00000000  0002e910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000080 	.word	0x20000080
 800014c:	00000000 	.word	0x00000000
 8000150:	08001a0c 	.word	0x08001a0c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000084 	.word	0x20000084
 800016c:	08001a0c 	.word	0x08001a0c

08000170 <LED_Initalize>:
#include "alarmled.h"



void LED_Initalize(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]



	//Initalize lower register of GPIOA first
	temp |= (1<< 0);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f043 0310 	orr.w	r3, r3, #16
 8000188:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000190:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000198:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a8:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001b8:	607b      	str	r3, [r7, #4]
	GPIOA->CRL = temp;
 80001ba:	4a43      	ldr	r2, [pc, #268]	; (80002c8 <LED_Initalize+0x158>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	6013      	str	r3, [r2, #0]

	//GPIOA high register in this case GPIOA pins 13, 14,15 need to remain untouched
	//So will first clear all reigsters apart from these two then or operations
	GPIOA->CRH &= (0xFFF<<20);
 80001c0:	4b41      	ldr	r3, [pc, #260]	; (80002c8 <LED_Initalize+0x158>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <LED_Initalize+0x158>)
 80001c6:	0d1b      	lsrs	r3, r3, #20
 80001c8:	051b      	lsls	r3, r3, #20
 80001ca:	6053      	str	r3, [r2, #4]
	temp = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	607b      	str	r3, [r7, #4]
	temp |= (1<< 0);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001e6:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001ee:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001f6:	607b      	str	r3, [r7, #4]
	GPIOA->CRH |= temp;
 80001f8:	4b33      	ldr	r3, [pc, #204]	; (80002c8 <LED_Initalize+0x158>)
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	4932      	ldr	r1, [pc, #200]	; (80002c8 <LED_Initalize+0x158>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4313      	orrs	r3, r2
 8000202:	604b      	str	r3, [r1, #4]

	GPIOB->ODR &= ~(0x3 << 3);
 8000204:	4b31      	ldr	r3, [pc, #196]	; (80002cc <LED_Initalize+0x15c>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a30      	ldr	r2, [pc, #192]	; (80002cc <LED_Initalize+0x15c>)
 800020a:	f023 0318 	bic.w	r3, r3, #24
 800020e:	60d3      	str	r3, [r2, #12]

	//GPIOB low register in this case only need to set B3,B5
	GPIOB->CRL &= ~(0xF0F<<12);
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <LED_Initalize+0x15c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <LED_Initalize+0x15c>)
 8000216:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800021e:	6013      	str	r3, [r2, #0]
	temp = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000232:	607b      	str	r3, [r7, #4]
	GPIOB->CRL |= temp;
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <LED_Initalize+0x15c>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4924      	ldr	r1, [pc, #144]	; (80002cc <LED_Initalize+0x15c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4313      	orrs	r3, r2
 800023e:	600b      	str	r3, [r1, #0]

	//GPIO B high all registers are used
	temp = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	607b      	str	r3, [r7, #4]
	temp |= (1<< 0);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000262:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000272:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800027a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000282:	607b      	str	r3, [r7, #4]
	GPIOB->CRH = temp;
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <LED_Initalize+0x15c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6053      	str	r3, [r2, #4]

	//GPIO C high only 13 14 15 are used
	GPIOC->CRH &= ~(0xFFF << 20);
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <LED_Initalize+0x160>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <LED_Initalize+0x160>)
 8000290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000294:	6053      	str	r3, [r2, #4]
	temp = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002a0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a8:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	607b      	str	r3, [r7, #4]
	GPIOC->CRH |= temp;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <LED_Initalize+0x160>)
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	4906      	ldr	r1, [pc, #24]	; (80002d0 <LED_Initalize+0x160>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4313      	orrs	r3, r2
 80002bc:	604b      	str	r3, [r1, #4]

}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <LED_NUM_1_SET_0>:
 * These functions can then be pointed to allowing the code to be run and a blinking effect to occur when being changed.
 *
 */

void LED_NUM_1_SET_0(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	LED_NUM_1_CLEAR();
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <LED_NUM_1_SET_0+0x24>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <LED_NUM_1_SET_0+0x24>)
 80002de:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80002e2:	60d3      	str	r3, [r2, #12]
	LED_NUM_1_0_ENABLE();
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <LED_NUM_1_SET_0+0x24>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <LED_NUM_1_SET_0+0x24>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	60d3      	str	r3, [r2, #12]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40010c00 	.word	0x40010c00

080002fc <LED_NUM_1_SET_1>:
void LED_NUM_1_SET_1(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	LED_NUM_1_CLEAR();
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <LED_NUM_1_SET_1+0x18>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a03      	ldr	r2, [pc, #12]	; (8000314 <LED_NUM_1_SET_1+0x18>)
 8000306:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40010c00 	.word	0x40010c00

08000318 <LED_NUM_2_SET_0>:


void LED_NUM_2_SET_0 (void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 8000322:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000326:	60d3      	str	r3, [r2, #12]
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a16      	ldr	r2, [pc, #88]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 800032e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000332:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 800033a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 8000346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800034a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 8000352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000356:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_4_ENABLE();
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <LED_NUM_2_SET_0+0x6c>)
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a07      	ldr	r2, [pc, #28]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 800036a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800036e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <LED_NUM_2_SET_0+0x70>)
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	60d3      	str	r3, [r2, #12]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00

0800038c <LED_NUM_2_SET_1>:
void LED_NUM_2_SET_1(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <LED_NUM_2_SET_1+0x3c>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <LED_NUM_2_SET_1+0x3c>)
 8000396:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800039a:	60d3      	str	r3, [r2, #12]
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <LED_NUM_2_SET_1+0x40>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LED_NUM_2_SET_1+0x40>)
 80003a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003a6:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <LED_NUM_2_SET_1+0x3c>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <LED_NUM_2_SET_1+0x3c>)
 80003ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <LED_NUM_2_SET_1+0x40>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <LED_NUM_2_SET_1+0x40>)
 80003ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003be:	60d3      	str	r3, [r2, #12]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <LED_NUM_2_SET_2>:
void LED_NUM_2_SET_2(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003da:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80003de:	60d3      	str	r3, [r2, #12]
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <LED_NUM_2_SET_2+0x64>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <LED_NUM_2_SET_2+0x64>)
 80003e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003ea:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f6:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000402:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a09      	ldr	r2, [pc, #36]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_4_ENABLE();
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a06      	ldr	r2, [pc, #24]	; (8000430 <LED_NUM_2_SET_2+0x60>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LED_NUM_2_SET_2+0x64>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <LED_NUM_2_SET_2+0x64>)
 8000422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000426:	60d3      	str	r3, [r2, #12]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00

08000438 <LED_NUM_2_SET_3>:
void LED_NUM_2_SET_3(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a15      	ldr	r2, [pc, #84]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 8000442:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000446:	60d3      	str	r3, [r2, #12]
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <LED_NUM_2_SET_3+0x64>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a13      	ldr	r2, [pc, #76]	; (800049c <LED_NUM_2_SET_3+0x64>)
 800044e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000452:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 800045a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 8000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a09      	ldr	r2, [pc, #36]	; (8000498 <LED_NUM_2_SET_3+0x60>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000476:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <LED_NUM_2_SET_3+0x64>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <LED_NUM_2_SET_3+0x64>)
 800047e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000482:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <LED_NUM_2_SET_3+0x64>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <LED_NUM_2_SET_3+0x64>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	60d3      	str	r3, [r2, #12]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40010800 	.word	0x40010800
 800049c:	40010c00 	.word	0x40010c00

080004a0 <LED_NUM_2_SET_4>:
void LED_NUM_2_SET_4(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004aa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80004ae:	60d3      	str	r3, [r2, #12]
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <LED_NUM_2_SET_4+0x58>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <LED_NUM_2_SET_4+0x58>)
 80004b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ba:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c6:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004d2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <LED_NUM_2_SET_4+0x54>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LED_NUM_2_SET_4+0x58>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <LED_NUM_2_SET_4+0x58>)
 80004e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004ea:	60d3      	str	r3, [r2, #12]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40010800 	.word	0x40010800
 80004f8:	40010c00 	.word	0x40010c00

080004fc <LED_NUM_2_SET_5>:
void LED_NUM_2_SET_5(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <LED_NUM_2_SET_5+0x60>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <LED_NUM_2_SET_5+0x60>)
 8000506:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800050a:	60d3      	str	r3, [r2, #12]
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 8000512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000516:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <LED_NUM_2_SET_5+0x60>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	4a0f      	ldr	r2, [pc, #60]	; (800055c <LED_NUM_2_SET_5+0x60>)
 800051e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000522:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <LED_NUM_2_SET_5+0x60>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <LED_NUM_2_SET_5+0x60>)
 800052a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <LED_NUM_2_SET_5+0x60>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4a09      	ldr	r2, [pc, #36]	; (800055c <LED_NUM_2_SET_5+0x60>)
 8000536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800053a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <LED_NUM_2_SET_5+0x64>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	60d3      	str	r3, [r2, #12]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40010800 	.word	0x40010800
 8000560:	40010c00 	.word	0x40010c00

08000564 <LED_NUM_2_SET_6>:
void LED_NUM_2_SET_6(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 800056e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000572:	60d3      	str	r3, [r2, #12]
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 800057a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 8000586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800058a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 8000592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000596:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_4_ENABLE();
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <LED_NUM_2_SET_6+0x6c>)
 80005aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ae:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <LED_NUM_2_SET_6+0x70>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40010800 	.word	0x40010800
 80005d4:	40010c00 	.word	0x40010c00

080005d8 <LED_NUM_2_SET_7>:
void LED_NUM_2_SET_7(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 80005e2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80005e6:	60d3      	str	r3, [r2, #12]
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <LED_NUM_2_SET_7+0x4c>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LED_NUM_2_SET_7+0x4c>)
 80005ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 80005fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005fe:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <LED_NUM_2_SET_7+0x48>)
 8000606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800060a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <LED_NUM_2_SET_7+0x4c>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <LED_NUM_2_SET_7+0x4c>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40010800 	.word	0x40010800
 8000624:	40010c00 	.word	0x40010c00

08000628 <LED_NUM_2_SET_8>:
void LED_NUM_2_SET_8(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000632:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000636:	60d3      	str	r3, [r2, #12]
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 800063e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000642:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800064a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800064e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800065a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000666:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800066e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000672:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_4_ENABLE();
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <LED_NUM_2_SET_8+0x78>)
 800067a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067e:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 8000686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068a:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_6_ENABLE();
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <LED_NUM_2_SET_8+0x7c>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40010800 	.word	0x40010800
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <LED_NUM_2_SET_9>:
void LED_NUM_2_SET_9(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	LED_NUM_2_CLEAR();
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80006b6:	60d3      	str	r3, [r2, #12]
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <LED_NUM_2_SET_9+0x64>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <LED_NUM_2_SET_9+0x64>)
 80006be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_0_ENABLE();
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ce:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_1_ENABLE();
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006da:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_2_ENABLE();
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a09      	ldr	r2, [pc, #36]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006e6:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_3_ENABLE();
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <LED_NUM_2_SET_9+0x60>)
 80006ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f2:	60d3      	str	r3, [r2, #12]
	LED_NUM_2_5_ENABLE();
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <LED_NUM_2_SET_9+0x64>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <LED_NUM_2_SET_9+0x64>)
 80006fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40010800 	.word	0x40010800
 800070c:	40010c00 	.word	0x40010c00

08000710 <LED_NUM_3_SET_0>:

void LED_NUM_3_SET_0 (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a18      	ldr	r2, [pc, #96]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 800071a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800071e:	60d3      	str	r3, [r2, #12]
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 8000726:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800072a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 8000732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000736:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a0f      	ldr	r2, [pc, #60]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <LED_NUM_3_SET_0+0x6c>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_4_ENABLE();
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 8000756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800075a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 8000762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000766:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_6_ENABLE();
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <LED_NUM_3_SET_0+0x70>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40011000 	.word	0x40011000
 8000780:	40010c00 	.word	0x40010c00

08000784 <LED_NUM_3_SET_1>:
void LED_NUM_3_SET_1(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <LED_NUM_3_SET_1+0x3c>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <LED_NUM_3_SET_1+0x3c>)
 800078e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000792:	60d3      	str	r3, [r2, #12]
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <LED_NUM_3_SET_1+0x40>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LED_NUM_3_SET_1+0x40>)
 800079a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800079e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <LED_NUM_3_SET_1+0x3c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <LED_NUM_3_SET_1+0x3c>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <LED_NUM_3_SET_1+0x40>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <LED_NUM_3_SET_1+0x40>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40011000 	.word	0x40011000
 80007c4:	40010c00 	.word	0x40010c00

080007c8 <LED_NUM_3_SET_3>:
	LED_NUM_3_3_ENABLE();
	LED_NUM_3_4_ENABLE();
	LED_NUM_3_6_ENABLE();
}
void LED_NUM_3_SET_3(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007d2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007d6:	60d3      	str	r3, [r2, #12]
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <LED_NUM_3_SET_3+0x64>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <LED_NUM_3_SET_3+0x64>)
 80007de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80007e2:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ee:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <LED_NUM_3_SET_3+0x60>)
 80007f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fa:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <LED_NUM_3_SET_3+0x64>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LED_NUM_3_SET_3+0x64>)
 8000802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000806:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <LED_NUM_3_SET_3+0x64>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <LED_NUM_3_SET_3+0x64>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_6_ENABLE();
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <LED_NUM_3_SET_3+0x64>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <LED_NUM_3_SET_3+0x64>)
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40011000 	.word	0x40011000
 800082c:	40010c00 	.word	0x40010c00

08000830 <LED_NUM_3_SET_4>:
void LED_NUM_3_SET_4(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 800083a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800083e:	60d3      	str	r3, [r2, #12]
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a10      	ldr	r2, [pc, #64]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 8000846:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800084a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4a09      	ldr	r2, [pc, #36]	; (8000884 <LED_NUM_3_SET_4+0x54>)
 800085e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000862:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 800086a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <LED_NUM_3_SET_4+0x58>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40011000 	.word	0x40011000
 8000888:	40010c00 	.word	0x40010c00

0800088c <LED_NUM_3_SET_5>:
void LED_NUM_3_SET_5(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 8000896:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800089a:	60d3      	str	r3, [r2, #12]
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008a6:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 80008ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b2:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LED_NUM_3_SET_5+0x60>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ca:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d6:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_6_ENABLE();
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <LED_NUM_3_SET_5+0x64>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40011000 	.word	0x40011000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <LED_NUM_3_SET_6>:
void LED_NUM_3_SET_6(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 80008fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000902:	60d3      	str	r3, [r2, #12]
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 800090a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800090e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 8000916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <LED_NUM_3_SET_6+0x6c>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_4_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 800093a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800093e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 8000946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_6_ENABLE();
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <LED_NUM_3_SET_6+0x70>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40011000 	.word	0x40011000
 8000964:	40010c00 	.word	0x40010c00

08000968 <LED_NUM_3_SET_7>:
void LED_NUM_3_SET_7(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 8000972:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000976:	60d3      	str	r3, [r2, #12]
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <LED_NUM_3_SET_7+0x4c>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LED_NUM_3_SET_7+0x4c>)
 800097e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000982:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 800098a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <LED_NUM_3_SET_7+0x48>)
 8000996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <LED_NUM_3_SET_7+0x4c>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <LED_NUM_3_SET_7+0x4c>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <LED_NUM_3_SET_8>:
void LED_NUM_3_SET_8(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009c6:	60d3      	str	r3, [r2, #12]
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 80009ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009d2:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009de:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <LED_NUM_3_SET_8+0x78>)
 80009f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f6:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_4_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a0e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_6_ENABLE();
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <LED_NUM_3_SET_8+0x7c>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40011000 	.word	0x40011000
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <LED_NUM_3_SET_9>:
void LED_NUM_3_SET_9(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	LED_NUM_3_CLEAR();
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a46:	60d3      	str	r3, [r2, #12]
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a52:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_0_ENABLE();
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a5e:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_1_ENABLE();
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_2_ENABLE();
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <LED_NUM_3_SET_9+0x60>)
 8000a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a76:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_3_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	60d3      	str	r3, [r2, #12]
	LED_NUM_3_5_ENABLE();
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <LED_NUM_3_SET_9+0x64>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40011000 	.word	0x40011000
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <LED_NUM_4_SET_0>:


void LED_NUM_4_SET_0 (void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aae:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_4_ENABLE();
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000ae6:	f043 0320 	orr.w	r3, r3, #32
 8000aea:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_6_ENABLE();
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <LED_NUM_4_SET_0+0x60>)
 8000af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40010800 	.word	0x40010800

08000b04 <LED_NUM_4_SET_1>:
void LED_NUM_4_SET_1(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b12:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4a03      	ldr	r2, [pc, #12]	; (8000b34 <LED_NUM_4_SET_1+0x30>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40010800 	.word	0x40010800

08000b38 <LED_NUM_4_SET_4>:
	LED_NUM_4_3_ENABLE();
	LED_NUM_4_5_ENABLE();
	LED_NUM_4_6_ENABLE();
}
void LED_NUM_4_SET_4(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b46:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_3_ENABLE();
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <LED_NUM_4_SET_4+0x48>)
 8000b72:	f043 0320 	orr.w	r3, r3, #32
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40010800 	.word	0x40010800

08000b84 <LED_NUM_4_SET_5>:
void LED_NUM_4_SET_5(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000b8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b92:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_3_ENABLE();
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bbe:	f043 0320 	orr.w	r3, r3, #32
 8000bc2:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_6_ENABLE();
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a03      	ldr	r2, [pc, #12]	; (8000bd8 <LED_NUM_4_SET_5+0x54>)
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40010800 	.word	0x40010800

08000bdc <LED_NUM_4_SET_6>:
void LED_NUM_4_SET_6(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bea:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_3_ENABLE();
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c0a:	f043 0308 	orr.w	r3, r3, #8
 8000c0e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_4_ENABLE();
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c22:	f043 0320 	orr.w	r3, r3, #32
 8000c26:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_6_ENABLE();
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <LED_NUM_4_SET_6+0x60>)
 8000c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	40010800 	.word	0x40010800

08000c40 <LED_NUM_4_SET_7>:
void LED_NUM_4_SET_7(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c4e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <LED_NUM_4_SET_7+0x3c>)
 8000c6e:	f043 0320 	orr.w	r3, r3, #32
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40010800 	.word	0x40010800

08000c80 <LED_NUM_4_SET_8>:
void LED_NUM_4_SET_8(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c8e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a15      	ldr	r2, [pc, #84]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_3_ENABLE();
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_4_ENABLE();
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_6_ENABLE();
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <LED_NUM_4_SET_8+0x6c>)
 8000cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40010800 	.word	0x40010800

08000cf0 <LED_NUM_4_SET_9>:
void LED_NUM_4_SET_9(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	LED_NUM_4_CLEAR();
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000cfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cfe:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_0_ENABLE();
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_1_ENABLE();
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_2_ENABLE();
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_3_ENABLE();
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	60d3      	str	r3, [r2, #12]
	LED_NUM_4_5_ENABLE();
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <LED_NUM_4_SET_9+0x54>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40010800 	.word	0x40010800

08000d48 <buttons_intalize>:

#include "clocksettings.h"


void buttons_intalize(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
	//Configrue the GPIO ports of the button.
	//B0 contains mode change button and B1 is set button
	//These need to be set to input pull down
	GPIOB->CRL &= ~(0xF << 0);
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <buttons_intalize+0xd4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <buttons_intalize+0xd4>)
 8000d54:	f023 030f 	bic.w	r3, r3, #15
 8000d58:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x8 << 0);
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <buttons_intalize+0xd4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <buttons_intalize+0xd4>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 4);
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <buttons_intalize+0xd4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <buttons_intalize+0xd4>)
 8000d6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d70:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x8 << 4);
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <buttons_intalize+0xd4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <buttons_intalize+0xd4>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6013      	str	r3, [r2, #0]

	//Enable interupts to occur on button press

	//Configure AFIO line so EXTI0 & 1 is on Port B
	uint32_t *AFIO_EXTICR1 =  (uint32_t *)(0x40010008);
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <buttons_intalize+0xd8>)
 8000d80:	60fb      	str	r3, [r7, #12]
	*AFIO_EXTICR1 |= (1<< 0);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f043 0201 	orr.w	r2, r3, #1
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	601a      	str	r2, [r3, #0]
	*AFIO_EXTICR1 |= (1<< 4);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f043 0210 	orr.w	r2, r3, #16
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	601a      	str	r2, [r3, #0]

	//Enable the EXTI by demasking the line and setting the trigger on rising edge
	uint32_t *EXTI_IMR =  (uint32_t *)(0x40010400);
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <buttons_intalize+0xdc>)
 8000d9c:	60bb      	str	r3, [r7, #8]
	uint32_t *EXTI_RTSR =  (uint32_t *)(0x40010408);
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <buttons_intalize+0xe0>)
 8000da0:	607b      	str	r3, [r7, #4]
	*EXTI_IMR |= (1<< 0);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	601a      	str	r2, [r3, #0]
	*EXTI_RTSR |= (1<< 0);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f043 0201 	orr.w	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
	*EXTI_IMR |= (1<< 1);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f043 0202 	orr.w	r2, r3, #2
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	601a      	str	r2, [r3, #0]
	*EXTI_RTSR |= (1<< 1);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f043 0202 	orr.w	r2, r3, #2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]

	//Configure the timer that handles long / short press
	//Timer 1 is used by mode button and 2 by set button
	//Set the PSC value (this equates to the timer incrementig every 1ms)
	TIM1->PSC |= (8000-1);
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <buttons_intalize+0xe4>)
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <buttons_intalize+0xe4>)
 8000dd8:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000ddc:	f043 031f 	orr.w	r3, r3, #31
 8000de0:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->PSC |= (8000-1);
 8000de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000df0:	f043 031f 	orr.w	r3, r3, #31
 8000df4:	6293      	str	r3, [r2, #40]	; 0x28
	//Enable the timers
	TIM1->CR1 |= 1;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <buttons_intalize+0xe4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <buttons_intalize+0xe4>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= 1;
 8000e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6013      	str	r3, [r2, #0]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40010c00 	.word	0x40010c00
 8000e20:	40010008 	.word	0x40010008
 8000e24:	40010400 	.word	0x40010400
 8000e28:	40010408 	.word	0x40010408
 8000e2c:	40012c00 	.word	0x40012c00

08000e30 <main>:




int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0


    /* Loop forever */
	uint32_t *RCC_APB2ENR = (uint32_t *)(0x40021018);
 8000e36:	4b98      	ldr	r3, [pc, #608]	; (8001098 <main+0x268>)
 8000e38:	607b      	str	r3, [r7, #4]
	uint32_t *RCC_APB1ENR = (uint32_t *)(0x4002101C);
 8000e3a:	4b98      	ldr	r3, [pc, #608]	; (800109c <main+0x26c>)
 8000e3c:	603b      	str	r3, [r7, #0]


	//Enable clock on GPIOA, GPIOB, GPIOC AFIO,TIM1,TIM2,TIM3,TIM4 and I2C1

	*RCC_APB2ENR |= (1 << 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 2);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f043 0204 	orr.w	r2, r3, #4
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 3);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f043 0208 	orr.w	r2, r3, #8
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 4);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f043 0210 	orr.w	r2, r3, #16
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1<< 11);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 0);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 1);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f043 0202 	orr.w	r2, r3, #2
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 2);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0204 	orr.w	r2, r3, #4
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 21);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	601a      	str	r2, [r3, #0]

	//Enable interupts for EXTI (button presses) and timers
	*((uint32_t*)NVIC_ISER0) |= 1<<6;
 8000eaa:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <main+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a7c      	ldr	r2, [pc, #496]	; (80010a0 <main+0x270>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<7;
 8000eb6:	4b7a      	ldr	r3, [pc, #488]	; (80010a0 <main+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a79      	ldr	r2, [pc, #484]	; (80010a0 <main+0x270>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<29;
 8000ec2:	4b77      	ldr	r3, [pc, #476]	; (80010a0 <main+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a76      	ldr	r2, [pc, #472]	; (80010a0 <main+0x270>)
 8000ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ecc:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<30;
 8000ece:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <main+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a73      	ldr	r2, [pc, #460]	; (80010a0 <main+0x270>)
 8000ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ed8:	6013      	str	r3, [r2, #0]



	LED_Initalize();
 8000eda:	f7ff f949 	bl	8000170 <LED_Initalize>
//	LED_NUM_2_SET_6();
//	LED_NUM_2_SET_7();
//	LED_NUM_2_SET_8();
//	LED_NUM_2_SET_9();
//
	TIM4->PSC |= (8000-1);
 8000ede:	4b71      	ldr	r3, [pc, #452]	; (80010a4 <main+0x274>)
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	4a70      	ldr	r2, [pc, #448]	; (80010a4 <main+0x274>)
 8000ee4:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000ee8:	f043 031f 	orr.w	r3, r3, #31
 8000eec:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = (4000-1);
 8000eee:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <main+0x274>)
 8000ef0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= 1;
 8000ef6:	4b6b      	ldr	r3, [pc, #428]	; (80010a4 <main+0x274>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	4a6a      	ldr	r2, [pc, #424]	; (80010a4 <main+0x274>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= 1 << 2;
 8000f02:	4b68      	ldr	r3, [pc, #416]	; (80010a4 <main+0x274>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a67      	ldr	r2, [pc, #412]	; (80010a4 <main+0x274>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6013      	str	r3, [r2, #0]

	buttons_intalize();
 8000f0e:	f7ff ff1b 	bl	8000d48 <buttons_intalize>


	//Configure and intalize the i2c peripheal to send data
	I2C_initalize();
 8000f12:	f000 fce9 	bl	80018e8 <I2C_initalize>


	//Make clock halt = 0 in DS peripheal
	ds1307_write(0x0, DS1307_ADDR_SEC);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 fb4b 	bl	80015b4 <ds1307_write>


	//Set the default values of the clock and alarm
	current_time.seconds = 0;
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <main+0x278>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	current_time.minutes = 0;
 8000f24:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <main+0x278>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	705a      	strb	r2, [r3, #1]
	current_time.hours = 12;
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <main+0x278>)
 8000f2c:	220c      	movs	r2, #12
 8000f2e:	709a      	strb	r2, [r3, #2]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000f30:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <main+0x278>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	70da      	strb	r2, [r3, #3]

	alarm_time.seconds = 0;
 8000f36:	4b5d      	ldr	r3, [pc, #372]	; (80010ac <main+0x27c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
	alarm_time.minutes = 0;
 8000f3c:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <main+0x27c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
	alarm_time.hours = 12;
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <main+0x27c>)
 8000f44:	220c      	movs	r2, #12
 8000f46:	709a      	strb	r2, [r3, #2]
	alarm_time.time_format = TIME_FORMAT_12HRS_PM;
 8000f48:	4b58      	ldr	r3, [pc, #352]	; (80010ac <main+0x27c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	70da      	strb	r2, [r3, #3]

	//Set user updated time to true so the values are passed into the rtc module
	userUpdatedTime = USER_UPDATED_TIME;
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <main+0x280>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]


	//Enable the timer that controls the interaction between the mcu and the rtc
	TIM3->PSC |= (8000-1);
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <main+0x284>)
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <main+0x284>)
 8000f5a:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000f5e:	f043 031f 	orr.w	r3, r3, #31
 8000f62:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->ARR = (8000-1);
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <main+0x284>)
 8000f66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= 1;
 8000f6c:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <main+0x284>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <main+0x284>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	60d3      	str	r3, [r2, #12]
	TIM3->CR1 |= 1 << 2;
 8000f78:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <main+0x284>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <main+0x284>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000f84:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <main+0x284>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <main+0x284>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]

	while(1)
	{

		//Handle mode swithching of alarm clock
		if(!(GPIOB->IDR & 1) && !buttonModeProcessed && ((TIM1->CNT - buttonModeLastDebounceTime) > 250) && buttonModeLastDebounceTime != 0)
 8000f90:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <main+0x288>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d124      	bne.n	8000fe6 <main+0x1b6>
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <main+0x28c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d120      	bne.n	8000fe6 <main+0x1b6>
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <main+0x290>)
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <main+0x294>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2bfa      	cmp	r3, #250	; 0xfa
 8000fb0:	d919      	bls.n	8000fe6 <main+0x1b6>
 8000fb2:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <main+0x294>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d015      	beq.n	8000fe6 <main+0x1b6>
		{
			//Process the button press
			buttonModeProcessed = 1;
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <main+0x28c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
			buttonModeLastDebounceTime = 0;
 8000fc0:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <main+0x294>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

			//Change the alarm clock state
			alarmClockState ++;
 8000fc6:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <main+0x298>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <main+0x298>)
 8000fd0:	701a      	strb	r2, [r3, #0]
			alarmClockState %= 4;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	; (80010c8 <main+0x298>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <main+0x298>)
 8000fde:	701a      	strb	r2, [r3, #0]
			alarmClockSetNum = 0;
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <main+0x29c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
		}


		//Handle setting of alarm clock
		if(!(GPIOB->IDR & (1<<1)) && !buttonSetProcessed && buttonSetLastDebounceTime != 0)
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <main+0x288>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ce      	bne.n	8000f90 <main+0x160>
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <main+0x2a0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1ca      	bne.n	8000f90 <main+0x160>
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <main+0x2a4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0c6      	beq.n	8000f90 <main+0x160>
		{
			//Check for long pulse
			if((TIM2->CNT - buttonSetLastDebounceTime) > 750)
 8001002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <main+0x2a4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001012:	4293      	cmp	r3, r2
 8001014:	d919      	bls.n	800104a <main+0x21a>
			{
				//Process the button press
				buttonSetProcessed = 1;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <main+0x2a0>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
				buttonSetLastDebounceTime = 0;
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <main+0x2a4>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]

				//Change the selected number
				alarmClockSetNum ++;
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <main+0x29c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <main+0x29c>)
 800102c:	701a      	strb	r2, [r3, #0]
				alarmClockSetNum %= 5;
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <main+0x29c>)
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <main+0x2a8>)
 8001034:	fba3 1302 	umull	r1, r3, r3, r2
 8001038:	0899      	lsrs	r1, r3, #2
 800103a:	460b      	mov	r3, r1
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <main+0x29c>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e7a2      	b.n	8000f90 <main+0x160>



			}
			//Check for short pulse
			else if((TIM2->CNT - buttonSetLastDebounceTime) > 250)
 800104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <main+0x2a4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2bfa      	cmp	r3, #250	; 0xfa
 8001058:	d99a      	bls.n	8000f90 <main+0x160>
			{
				//Update time. Time variable updated is based on what is being set
				if(alarmClockState == ALARM_CLOCK_SET)
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <main+0x298>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d108      	bne.n	8001074 <main+0x244>
				{
					//Update time then set userupdatedtime vairable so that mcu knows to write new time value to rtc
					updateClockTime(&current_time, alarmClockSetNum);
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <main+0x29c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <main+0x278>)
 800106a:	f000 fb4d 	bl	8001708 <updateClockTime>
					userUpdatedTime = USER_UPDATED_TIME;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <main+0x280>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
				}
				if(alarmClockState == ALARM_CLOCK_SET_ALARM)
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <main+0x298>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d105      	bne.n	8001088 <main+0x258>
				{
					updateClockTime(&alarm_time, alarmClockSetNum);
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <main+0x29c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <main+0x27c>)
 8001084:	f000 fb40 	bl	8001708 <updateClockTime>
				}

				//Process the button press
				buttonSetProcessed = 1;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <main+0x2a0>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
				buttonSetLastDebounceTime = 0;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <main+0x2a4>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
		if(!(GPIOB->IDR & 1) && !buttonModeProcessed && ((TIM1->CNT - buttonModeLastDebounceTime) > 250) && buttonModeLastDebounceTime != 0)
 8001094:	e77c      	b.n	8000f90 <main+0x160>
 8001096:	bf00      	nop
 8001098:	40021018 	.word	0x40021018
 800109c:	4002101c 	.word	0x4002101c
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	40000800 	.word	0x40000800
 80010a8:	200000a0 	.word	0x200000a0
 80010ac:	200000a4 	.word	0x200000a4
 80010b0:	2000009e 	.word	0x2000009e
 80010b4:	40000400 	.word	0x40000400
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	200000a8 	.word	0x200000a8
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	200000ac 	.word	0x200000ac
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	2000009d 	.word	0x2000009d
 80010d0:	200000b0 	.word	0x200000b0
 80010d4:	200000b4 	.word	0x200000b4
 80010d8:	cccccccd 	.word	0xcccccccd

080010dc <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	//Save timer state to use a comparison to determine press length
	buttonModeLastDebounceTime = TIM1->CNT;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <EXTI0_IRQHandler+0x30>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <EXTI0_IRQHandler+0x34>)
 80010e8:	6013      	str	r3, [r2, #0]
	buttonModeProcessed = 0;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <EXTI0_IRQHandler+0x38>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	//Clear the EXTI interupt
	uint32_t *EXTI_PR =  (uint32_t *)(0x40010414);
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <EXTI0_IRQHandler+0x3c>)
 80010f2:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1 << 0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f043 0201 	orr.w	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]

}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00
 8001110:	200000ac 	.word	0x200000ac
 8001114:	200000a8 	.word	0x200000a8
 8001118:	40010414 	.word	0x40010414

0800111c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
	//Save timer state to use a comparison to determine press length
	buttonSetLastDebounceTime = TIM2->CNT;
 8001122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <EXTI1_IRQHandler+0x30>)
 800112a:	6013      	str	r3, [r2, #0]
	buttonSetProcessed = 0;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <EXTI1_IRQHandler+0x34>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
	//Clear interupt
	uint32_t *EXTI_PR =  (uint32_t *)(0x40010414);
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <EXTI1_IRQHandler+0x38>)
 8001134:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1 << 1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f043 0202 	orr.w	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	200000b4 	.word	0x200000b4
 8001150:	200000b0 	.word	0x200000b0
 8001154:	40010414 	.word	0x40010414

08001158 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

	//First a check must be made if the user has changed the clock values between interactions.
	//If this is the case the mcu should write the changed value to the rtc.
	//If this change has not been made the user should read the time value from the rtc.
	//ds1307_set_current_time(&current_time);
	if(userUpdatedTime == USER_UPDATED_TIME)
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <TIM3_IRQHandler+0xc4>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d106      	bne.n	8001174 <TIM3_IRQHandler+0x1c>
	{
		ds1307_set_current_time(&current_time);
 8001166:	482e      	ldr	r0, [pc, #184]	; (8001220 <TIM3_IRQHandler+0xc8>)
 8001168:	f000 fa4e 	bl	8001608 <ds1307_set_current_time>
		userUpdatedTime = USER_NOT_UPDATED_TIME;
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <TIM3_IRQHandler+0xc4>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	e03c      	b.n	80011ee <TIM3_IRQHandler+0x96>
	}
	else
	{
		ds1307_get_current_time(&current_time);
 8001174:	482a      	ldr	r0, [pc, #168]	; (8001220 <TIM3_IRQHandler+0xc8>)
 8001176:	f000 fa80 	bl	800167a <ds1307_get_current_time>

		//Update the displayed LEDs
		uint8_t hoursTen,hoursOne,minsTen,minsOne;
		hoursTen = current_time.hours / 10;
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <TIM3_IRQHandler+0xc8>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	4a29      	ldr	r2, [pc, #164]	; (8001224 <TIM3_IRQHandler+0xcc>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	71fb      	strb	r3, [r7, #7]
		hoursOne = current_time.hours % 10;
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <TIM3_IRQHandler+0xc8>)
 800118a:	789a      	ldrb	r2, [r3, #2]
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <TIM3_IRQHandler+0xcc>)
 800118e:	fba3 1302 	umull	r1, r3, r3, r2
 8001192:	08d9      	lsrs	r1, r3, #3
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	71bb      	strb	r3, [r7, #6]
		minsTen = current_time.minutes / 10;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <TIM3_IRQHandler+0xc8>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <TIM3_IRQHandler+0xcc>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	717b      	strb	r3, [r7, #5]
		minsOne = current_time.minutes % 10;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <TIM3_IRQHandler+0xc8>)
 80011b0:	785a      	ldrb	r2, [r3, #1]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <TIM3_IRQHandler+0xcc>)
 80011b4:	fba3 1302 	umull	r1, r3, r3, r2
 80011b8:	08d9      	lsrs	r1, r3, #3
 80011ba:	460b      	mov	r3, r1
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	713b      	strb	r3, [r7, #4]

		//Set the LEDS to display the numbers
		(*NUM_1_SET[hoursTen])();
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <TIM3_IRQHandler+0xd0>)
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	4798      	blx	r3
		(*NUM_2_SET[hoursOne])();
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <TIM3_IRQHandler+0xd4>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	4798      	blx	r3
		(*NUM_3_SET[minsTen])();
 80011da:	797b      	ldrb	r3, [r7, #5]
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <TIM3_IRQHandler+0xd8>)
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	4798      	blx	r3
		(*NUM_4_SET[minsOne])();
 80011e4:	793b      	ldrb	r3, [r7, #4]
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <TIM3_IRQHandler+0xdc>)
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	4798      	blx	r3


	}

	//Handle the checking of alarms by comparing all time values between the two clocks
	if(alarmClockState == ALARM_CLOCK_ALARM && alarm_time.hours == current_time.hours && alarm_time.minutes == current_time.minutes && alarm_time.time_format == current_time.time_format)
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <TIM3_IRQHandler+0xe0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10a      	bne.n	800120c <TIM3_IRQHandler+0xb4>
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <TIM3_IRQHandler+0xe4>)
 80011f8:	789a      	ldrb	r2, [r3, #2]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <TIM3_IRQHandler+0xc8>)
 80011fc:	789b      	ldrb	r3, [r3, #2]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d104      	bne.n	800120c <TIM3_IRQHandler+0xb4>
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <TIM3_IRQHandler+0xe4>)
 8001204:	785a      	ldrb	r2, [r3, #1]
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <TIM3_IRQHandler+0xc8>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	429a      	cmp	r2, r3
	{
		//Handle the alarm
	}

	//Clear the interupt
	TIM3->SR = 0;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <TIM3_IRQHandler+0xe8>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000009e 	.word	0x2000009e
 8001220:	200000a0 	.word	0x200000a0
 8001224:	cccccccd 	.word	0xcccccccd
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000030 	.word	0x20000030
 8001234:	20000058 	.word	0x20000058
 8001238:	2000009c 	.word	0x2000009c
 800123c:	200000a4 	.word	0x200000a4
 8001240:	40000400 	.word	0x40000400

08001244 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	//When a user is editing the time of the clock or an alarm they must be able to know what number they are currently changing.
	//This timer toggles the current number on a set clock creating a blinking effect

	if(blinked == LED_ON)
 800124a:	4b4c      	ldr	r3, [pc, #304]	; (800137c <TIM4_IRQHandler+0x138>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d13c      	bne.n	80012cc <TIM4_IRQHandler+0x88>
	{
		switch(alarmClockSetNum)
 8001252:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <TIM4_IRQHandler+0x13c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	2b03      	cmp	r3, #3
 800125a:	d833      	bhi.n	80012c4 <TIM4_IRQHandler+0x80>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <TIM4_IRQHandler+0x20>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001275 	.word	0x08001275
 8001268:	08001283 	.word	0x08001283
 800126c:	0800129d 	.word	0x0800129d
 8001270:	080012b7 	.word	0x080012b7
		{
		case 1:
			LED_NUM_1_CLEAR();
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <TIM4_IRQHandler+0x140>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4a42      	ldr	r2, [pc, #264]	; (8001384 <TIM4_IRQHandler+0x140>)
 800127a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800127e:	60d3      	str	r3, [r2, #12]
			break;
 8001280:	e020      	b.n	80012c4 <TIM4_IRQHandler+0x80>
		case 2:
			LED_NUM_2_CLEAR();
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <TIM4_IRQHandler+0x144>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	4a40      	ldr	r2, [pc, #256]	; (8001388 <TIM4_IRQHandler+0x144>)
 8001288:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800128c:	60d3      	str	r3, [r2, #12]
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <TIM4_IRQHandler+0x140>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a3c      	ldr	r2, [pc, #240]	; (8001384 <TIM4_IRQHandler+0x140>)
 8001294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001298:	60d3      	str	r3, [r2, #12]
			break;
 800129a:	e013      	b.n	80012c4 <TIM4_IRQHandler+0x80>
		case 3:
			LED_NUM_3_CLEAR();
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <TIM4_IRQHandler+0x148>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4a3a      	ldr	r2, [pc, #232]	; (800138c <TIM4_IRQHandler+0x148>)
 80012a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012a6:	60d3      	str	r3, [r2, #12]
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <TIM4_IRQHandler+0x140>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a35      	ldr	r2, [pc, #212]	; (8001384 <TIM4_IRQHandler+0x140>)
 80012ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012b2:	60d3      	str	r3, [r2, #12]
			break;
 80012b4:	e006      	b.n	80012c4 <TIM4_IRQHandler+0x80>
		case 4:
			LED_NUM_4_CLEAR();
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <TIM4_IRQHandler+0x144>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4a33      	ldr	r2, [pc, #204]	; (8001388 <TIM4_IRQHandler+0x144>)
 80012bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012c0:	60d3      	str	r3, [r2, #12]
			break;
 80012c2:	bf00      	nop
		}
		//Now turn the led to off
		blinked = LED_OFF;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <TIM4_IRQHandler+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e050      	b.n	800136e <TIM4_IRQHandler+0x12a>
	}
	else
	{

		switch(alarmClockSetNum)
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <TIM4_IRQHandler+0x13c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d848      	bhi.n	8001368 <TIM4_IRQHandler+0x124>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <TIM4_IRQHandler+0x98>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	08001307 	.word	0x08001307
 80012e4:	0800132b 	.word	0x0800132b
 80012e8:	08001345 	.word	0x08001345
		{
		case 1:
		{
			uint8_t hoursTen = current_time.hours / 10;
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <TIM4_IRQHandler+0x14c>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <TIM4_IRQHandler+0x150>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	713b      	strb	r3, [r7, #4]
			(*NUM_1_SET[hoursTen])();
 80012fa:	793b      	ldrb	r3, [r7, #4]
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <TIM4_IRQHandler+0x154>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	4798      	blx	r3
			break;
 8001304:	e030      	b.n	8001368 <TIM4_IRQHandler+0x124>
		}
		case 2:
		{
			uint8_t hoursOne = current_time.hours % 10;
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <TIM4_IRQHandler+0x14c>)
 8001308:	789a      	ldrb	r2, [r3, #2]
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <TIM4_IRQHandler+0x150>)
 800130c:	fba3 1302 	umull	r1, r3, r3, r2
 8001310:	08d9      	lsrs	r1, r3, #3
 8001312:	460b      	mov	r3, r1
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	717b      	strb	r3, [r7, #5]
			(*NUM_2_SET[hoursOne])();
 800131e:	797b      	ldrb	r3, [r7, #5]
 8001320:	4a1e      	ldr	r2, [pc, #120]	; (800139c <TIM4_IRQHandler+0x158>)
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	4798      	blx	r3
			break;
 8001328:	e01e      	b.n	8001368 <TIM4_IRQHandler+0x124>
		}
		case 3:
		{
			uint8_t minsTen = current_time.minutes / 10;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <TIM4_IRQHandler+0x14c>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	4a19      	ldr	r2, [pc, #100]	; (8001394 <TIM4_IRQHandler+0x150>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	71bb      	strb	r3, [r7, #6]
			(*NUM_3_SET[minsTen])();
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <TIM4_IRQHandler+0x15c>)
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	4798      	blx	r3
			break;
 8001342:	e011      	b.n	8001368 <TIM4_IRQHandler+0x124>
		}
		case 4:
		{
			uint8_t minsOne = current_time.minutes % 10;
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <TIM4_IRQHandler+0x14c>)
 8001346:	785a      	ldrb	r2, [r3, #1]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <TIM4_IRQHandler+0x150>)
 800134a:	fba3 1302 	umull	r1, r3, r3, r2
 800134e:	08d9      	lsrs	r1, r3, #3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	71fb      	strb	r3, [r7, #7]
			(*NUM_4_SET[minsOne])();
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <TIM4_IRQHandler+0x160>)
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	4798      	blx	r3
			break;
 8001366:	bf00      	nop
		}
		}
		//Turn the LED ON
		blinked = LED_ON;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <TIM4_IRQHandler+0x138>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]

	}

	//Clear the SR
	TIM4->SR = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <TIM4_IRQHandler+0x164>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000009f 	.word	0x2000009f
 8001380:	2000009d 	.word	0x2000009d
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40010800 	.word	0x40010800
 800138c:	40011000 	.word	0x40011000
 8001390:	200000a0 	.word	0x200000a0
 8001394:	cccccccd 	.word	0xcccccccd
 8001398:	20000000 	.word	0x20000000
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000030 	.word	0x20000030
 80013a4:	20000058 	.word	0x20000058
 80013a8:	40000800 	.word	0x40000800

080013ac <binary_to_bcd>:
 */

#include "rtci2c.h"

uint8_t binary_to_bcd(uint8_t value)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	uint8_t tens, ones,bcd;
	//If only 1s bcd value is the same as binary
	bcd = value;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b09      	cmp	r3, #9
 80013be:	d918      	bls.n	80013f2 <binary_to_bcd+0x46>
	{
		tens = value/10;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <binary_to_bcd+0x54>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	73bb      	strb	r3, [r7, #14]
		ones = value %10;
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <binary_to_bcd+0x54>)
 80013d0:	fba3 1302 	umull	r1, r3, r3, r2
 80013d4:	08d9      	lsrs	r1, r3, #3
 80013d6:	460b      	mov	r3, r1
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((tens<<4)|ones );
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b25a      	sxtb	r2, r3
 80013e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	cccccccd 	.word	0xcccccccd

08001404 <bcd_to_binary>:

uint8_t bcd_to_binary(uint8_t value)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	//This function gets the amount of tens and ones
	uint8_t tens, ones,binary;
	tens = (value >>4);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	73fb      	strb	r3, [r7, #15]
	ones = (value & 0x0F);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	73bb      	strb	r3, [r7, #14]
	binary = tens*10 + ones;
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	461a      	mov	r2, r3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	4413      	add	r3, r2
 800142c:	737b      	strb	r3, [r7, #13]

	return (uint8_t)binary;
 800142e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <I2C_SendData>:



void  I2C_SendData(uint8_t *pTXBuffer, uint32_t Len, uint8_t Sr)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	4613      	mov	r3, r2
 8001448:	71fb      	strb	r3, [r7, #7]

	//Generate START Condition
	I2C1->CR1 |= (1<< 8);
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <I2C_SendData+0xa4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <I2C_SendData+0xa4>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

	//Poll the SB flag in SR1. Hang program until its set
	while(!(I2C1->SR1 & 1));
 8001456:	bf00      	nop
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <I2C_SendData+0xa4>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f9      	beq.n	8001458 <I2C_SendData+0x1c>

	//Write the slave address to the DR
	//First bit must be cleared
	I2C1->DR = DS1307_DEVICE_ADDR << 1;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <I2C_SendData+0xa4>)
 8001466:	22d0      	movs	r2, #208	; 0xd0
 8001468:	611a      	str	r2, [r3, #16]

	//Poll the ADDR flag in SR1. Hang program until its set
	while(!(I2C1->SR1& (1<< 1)));
 800146a:	bf00      	nop
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <I2C_SendData+0xa4>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <I2C_SendData+0x30>

	//ADDR flag cleared by reading SR1 then SR2
	uint32_t dummyread;
	dummyread = I2C1->SR1;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <I2C_SendData+0xa4>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	617b      	str	r3, [r7, #20]
	dummyread = I2C1->SR2;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <I2C_SendData+0xa4>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	617b      	str	r3, [r7, #20]
	(void)dummyread;

	//Send all bytes of data
	while(Len > 0)
 8001484:	e010      	b.n	80014a8 <I2C_SendData+0x6c>
	{
		//Hang the program until TXE SR1 is set
		while(!(I2C1->SR1& (1<< 7)));
 8001486:	bf00      	nop
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <I2C_SendData+0xa4>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f9      	beq.n	8001488 <I2C_SendData+0x4c>

		//1. load the data in to DR
		I2C1->DR = *(pTXBuffer);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <I2C_SendData+0xa4>)
 800149a:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		Len--;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3b01      	subs	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]

		//3. Increment the buffer address
		pTXBuffer++;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
	while(Len > 0)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1eb      	bne.n	8001486 <I2C_SendData+0x4a>
	}


	//Wait for TXE and BTF to be set as they signal end of data transfer
	while(!(I2C1->SR1& (1<< 7)));
 80014ae:	bf00      	nop
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <I2C_SendData+0xa4>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f9      	beq.n	80014b0 <I2C_SendData+0x74>
	while(!(I2C1->SR1& (1<< 2)));
 80014bc:	bf00      	nop
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <I2C_SendData+0xa4>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f9      	beq.n	80014be <I2C_SendData+0x82>


	//Generate the stop condition
	I2C1->CR1 |= (1<< 9);
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <I2C_SendData+0xa4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <I2C_SendData+0xa4>)
 80014d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d4:	6013      	str	r3, [r2, #0]

}
 80014d6:	bf00      	nop
 80014d8:	371c      	adds	r7, #28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40005400 	.word	0x40005400

080014e4 <I2C_RecieveData>:


void I2C_RecieveData(uint8_t *pRXBuffer)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

	//Generate START Condition
	I2C1->CR1 |= (1<< 8);
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <I2C_RecieveData+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <I2C_RecieveData+0xcc>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]

	//Enable ACKING
	I2C1->CR1 |= (1<< 10);
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <I2C_RecieveData+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a2c      	ldr	r2, [pc, #176]	; (80015b0 <I2C_RecieveData+0xcc>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001502:	6013      	str	r3, [r2, #0]

	//Poll the SB flag in SR1. Hang program until its set
	while(!(I2C1->SR1 & 1));
 8001504:	bf00      	nop
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f9      	beq.n	8001506 <I2C_RecieveData+0x22>

	//Write the slave address to the DR last bit set 1 as write
	I2C1->DR = (DS1307_DEVICE_ADDR << 1) |(1);
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001514:	22d1      	movs	r2, #209	; 0xd1
 8001516:	611a      	str	r2, [r3, #16]
	//ONLY THREE BYTES ARE EITHER RECIEVED AT A TIME AS THAT IS ALL THAT IS REQUIRED TO GET THE RTC STATE
	//THEREFORE CODE IS SET UP AS PER I2C MANUAL TO RECIEVE THESE 3 BYTES
	//pg 5 - https://www.st.com/resource/en/application_note/cd00209826-stm32f10xxx-i-c-optimized-examples-stmicroelectronics.pdf

	//Poll the ADDR flag in SR1. Hang program until its set
	while(!(I2C1->SR1& (1<< 1)));
 8001518:	bf00      	nop
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <I2C_RecieveData+0xcc>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f9      	beq.n	800151a <I2C_RecieveData+0x36>

	//ADDR flag cleared by reading SR1 then SR2
	uint32_t dummyread;
	dummyread = I2C1->SR1;
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	60fb      	str	r3, [r7, #12]
	dummyread = I2C1->SR2;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <I2C_RecieveData+0xcc>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	60fb      	str	r3, [r7, #12]
	(void)dummyread;

	//Wait until RXNE is set signifing data is received
	while(!(I2C1->SR1& (1<< 6)));
 8001532:	bf00      	nop
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f9      	beq.n	8001534 <I2C_RecieveData+0x50>

	//Wait until btf flag is set signfying two bytes of data have been recieved as both the shift and data register are full
	while(!(I2C1->SR1& (1<< 2)));
 8001540:	bf00      	nop
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f9      	beq.n	8001542 <I2C_RecieveData+0x5e>

	//Disable acking so that when the next byte of data is received (final byte) it recieves a nack
	I2C1->CR1 &= ~(1<< 10);
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001558:	6013      	str	r3, [r2, #0]

	//Read the first byte of data
	*pRXBuffer = I2C1->DR;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <I2C_RecieveData+0xcc>)
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	701a      	strb	r2, [r3, #0]
	pRXBuffer++;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3301      	adds	r3, #1
 8001568:	607b      	str	r3, [r7, #4]

	//Final byte is now recieved and NACK pulse send ending data transfer

	//Generate the stop condition as no more data should be sent
	I2C1->CR1 |= (1<< 9);
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <I2C_RecieveData+0xcc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001574:	6013      	str	r3, [r2, #0]

	//Read the second byte of data
	*pRXBuffer = I2C1->DR;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	701a      	strb	r2, [r3, #0]
	pRXBuffer++;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3301      	adds	r3, #1
 8001584:	607b      	str	r3, [r7, #4]

	//Wait until RXNE is set signifing last byte of data has defiently arrived
	while(!(I2C1->SR1& (1<< 6)));
 8001586:	bf00      	nop
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <I2C_RecieveData+0xcc>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f9      	beq.n	8001588 <I2C_RecieveData+0xa4>

	//Read the data
	*pRXBuffer = I2C1->DR;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <I2C_RecieveData+0xcc>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	701a      	strb	r2, [r3, #0]
	pRXBuffer++;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]

}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40005400 	.word	0x40005400

080015b4 <ds1307_write>:

void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	460a      	mov	r2, r1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	4613      	mov	r3, r2
 80015c2:	71bb      	strb	r3, [r7, #6]
	//Sends two bytes of data to enable the clock
	uint8_t tx[2];
	tx[0] = reg_addr;
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	737b      	strb	r3, [r7, #13]
	I2C_SendData(tx, 2,0);
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	2102      	movs	r1, #2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff31 	bl	800143c <I2C_SendData>
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <ds1307_read>:

void ds1307_read(uint8_t reg_addr,uint8_t *data)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	6039      	str	r1, [r7, #0]
 80015ec:	71fb      	strb	r3, [r7, #7]
	//Send address then receive data
	I2C_SendData(&reg_addr, 1,1);
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	2201      	movs	r2, #1
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff21 	bl	800143c <I2C_SendData>
	I2C_RecieveData(data);
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f7ff ff72 	bl	80014e4 <I2C_RecieveData>


}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	uint8_t hrs;


	//send minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fec9 	bl	80013ac <binary_to_bcd>
 800161a:	4603      	mov	r3, r0
 800161c:	2101      	movs	r1, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ffc8 	bl	80015b4 <ds1307_write>

	//set hours
	hrs = binary_to_bcd(rtc_time->hours);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff febf 	bl	80013ac <binary_to_bcd>
 800162e:	4603      	mov	r3, r0
 8001630:	73fb      	strb	r3, [r7, #15]
	//Ensure bit 7 is cleared to not turn of clock
	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	78db      	ldrb	r3, [r3, #3]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d104      	bne.n	8001644 <ds1307_set_current_time+0x3c>
	{
		hrs &= ~(1 << 6);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e011      	b.n	8001668 <ds1307_set_current_time+0x60>
	}
	else
	{
		hrs |= (1 << 6);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164a:	73fb      	strb	r3, [r7, #15]
		hrs =(rtc_time->time_format ==TIME_FORMAT_12HRS_PM ) ? hrs | (1<<5) : hrs & ~(1<<5);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d104      	bne.n	800165e <ds1307_set_current_time+0x56>
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	b2db      	uxtb	r3, r3
 800165c:	e003      	b.n	8001666 <ds1307_set_current_time+0x5e>
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f023 0320 	bic.w	r3, r3, #32
 8001664:	b2db      	uxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffa1 	bl	80015b4 <ds1307_write>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <ds1307_get_current_time>:
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	uint8_t time_data [3];
	ds1307_read(DS1307_ADDR_SEC, time_data);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff ffaa 	bl	80015e2 <ds1307_read>
	uint8_t seconds,hrs;
	seconds = time_data[0];
 800168e:	7a3b      	ldrb	r3, [r7, #8]
 8001690:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001698:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff feb1 	bl	8001404 <bcd_to_binary>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	701a      	strb	r2, [r3, #0]


	rtc_time->minutes = bcd_to_binary(time_data[1]);
 80016aa:	7a7b      	ldrb	r3, [r7, #9]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fea9 	bl	8001404 <bcd_to_binary>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	705a      	strb	r2, [r3, #1]

	hrs = time_data[2];
 80016ba:	7abb      	ldrb	r3, [r7, #10]
 80016bc:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1<<6))
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00f      	beq.n	80016e8 <ds1307_get_current_time+0x6e>
	{
		//12hr format
		//ever gives 12hr am (0) or 12hr pm (1)
		rtc_time->time_format = !((hrs & (1<< 5)) == 0) ;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	70da      	strb	r2, [r3, #3]
		//clear 6th and 5th position
		hrs &= ~(0x3 << 5);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e002      	b.n	80016ee <ds1307_get_current_time+0x74>
	}
	else
	{
		//24hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe87 	bl	8001404 <bcd_to_binary>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	709a      	strb	r2, [r3, #2]
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <updateClockTime>:


void updateClockTime(RTC_time_t *rtc_time, uint8_t alarmClockSetNum)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	uint8_t tens, ones;
	//Tens hours
	if(alarmClockSetNum == 0)
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d127      	bne.n	800176a <updateClockTime+0x62>
	{
		rtc_time->hours += 10;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	789b      	ldrb	r3, [r3, #2]
 800171e:	330a      	adds	r3, #10
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	709a      	strb	r2, [r3, #2]
		if(rtc_time->hours > 12)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	789b      	ldrb	r3, [r3, #2]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d90e      	bls.n	800174c <updateClockTime+0x44>
		{
			rtc_time->hours %= 10;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	789a      	ldrb	r2, [r3, #2]
 8001732:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <updateClockTime+0x1d0>)
 8001734:	fba3 1302 	umull	r1, r3, r3, r2
 8001738:	08d9      	lsrs	r1, r3, #3
 800173a:	460b      	mov	r3, r1
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b2da      	uxtb	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	709a      	strb	r2, [r3, #2]
		{
			rtc_time->time_format = TIME_FORMAT_12HRS_PM;
		}
	}

}
 800174a:	e0c0      	b.n	80018ce <updateClockTime+0x1c6>
			rtc_time->hours %= 20;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	789a      	ldrb	r2, [r3, #2]
 8001750:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <updateClockTime+0x1d0>)
 8001752:	fba3 1302 	umull	r1, r3, r3, r2
 8001756:	0919      	lsrs	r1, r3, #4
 8001758:	460b      	mov	r3, r1
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	709a      	strb	r2, [r3, #2]
}
 8001768:	e0b1      	b.n	80018ce <updateClockTime+0x1c6>
	else if(alarmClockSetNum == 1)
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d146      	bne.n	80017fe <updateClockTime+0xf6>
		tens = rtc_time->hours / 10;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	789b      	ldrb	r3, [r3, #2]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <updateClockTime+0x1d0>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	73bb      	strb	r3, [r7, #14]
		ones = (rtc_time->hours) %10;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	789a      	ldrb	r2, [r3, #2]
 8001782:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <updateClockTime+0x1d0>)
 8001784:	fba3 1302 	umull	r1, r3, r3, r2
 8001788:	08d9      	lsrs	r1, r3, #3
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	73fb      	strb	r3, [r7, #15]
		if(tens == 1)
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10d      	bne.n	80017b8 <updateClockTime+0xb0>
			ones = ((ones+1)% 3);
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <updateClockTime+0x1d4>)
 80017a2:	fb83 3102 	smull	r3, r1, r3, r2
 80017a6:	17d3      	asrs	r3, r2, #31
 80017a8:	1ac9      	subs	r1, r1, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	440b      	add	r3, r1
 80017b0:	1ad1      	subs	r1, r2, r3
 80017b2:	460b      	mov	r3, r1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e016      	b.n	80017e6 <updateClockTime+0xde>
		else if (tens == 0)
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d113      	bne.n	80017e6 <updateClockTime+0xde>
			ones = ((ones+1)% 10);
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <updateClockTime+0x1d8>)
 80017c4:	fb83 1302 	smull	r1, r3, r3, r2
 80017c8:	1099      	asrs	r1, r3, #2
 80017ca:	17d3      	asrs	r3, r2, #31
 80017cc:	1ac9      	subs	r1, r1, r3
 80017ce:	460b      	mov	r3, r1
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	1ad1      	subs	r1, r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	73fb      	strb	r3, [r7, #15]
			if(ones == 0) ones = 1;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <updateClockTime+0xde>
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
		rtc_time->hours = (tens*10 + ones);
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	461a      	mov	r2, r3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	709a      	strb	r2, [r3, #2]
}
 80017fc:	e067      	b.n	80018ce <updateClockTime+0x1c6>
	else if(alarmClockSetNum == 2)
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d12c      	bne.n	800185e <updateClockTime+0x156>
		tens = rtc_time->minutes / 10;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <updateClockTime+0x1d0>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	73bb      	strb	r3, [r7, #14]
		ones = rtc_time->minutes % 10;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	785a      	ldrb	r2, [r3, #1]
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <updateClockTime+0x1d0>)
 8001818:	fba3 1302 	umull	r1, r3, r3, r2
 800181c:	08d9      	lsrs	r1, r3, #3
 800181e:	460b      	mov	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	73fb      	strb	r3, [r7, #15]
		tens += 1;
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	3301      	adds	r3, #1
 800182e:	73bb      	strb	r3, [r7, #14]
		tens %= 6;
 8001830:	7bba      	ldrb	r2, [r7, #14]
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <updateClockTime+0x1dc>)
 8001834:	fba3 1302 	umull	r1, r3, r3, r2
 8001838:	0899      	lsrs	r1, r3, #2
 800183a:	460b      	mov	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	73bb      	strb	r3, [r7, #14]
		rtc_time->minutes = (tens*10 + ones);
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	461a      	mov	r2, r3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	4413      	add	r3, r2
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	705a      	strb	r2, [r3, #1]
}
 800185c:	e037      	b.n	80018ce <updateClockTime+0x1c6>
	else if(alarmClockSetNum == 3)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d122      	bne.n	80018aa <updateClockTime+0x1a2>
		tens = rtc_time->minutes / 10;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <updateClockTime+0x1d0>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	08db      	lsrs	r3, r3, #3
 8001870:	73bb      	strb	r3, [r7, #14]
		ones = (rtc_time->minutes +1) % 10;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <updateClockTime+0x1d8>)
 800187a:	fb83 1302 	smull	r1, r3, r3, r2
 800187e:	1099      	asrs	r1, r3, #2
 8001880:	17d3      	asrs	r3, r2, #31
 8001882:	1ac9      	subs	r1, r1, r3
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	1ad1      	subs	r1, r2, r3
 800188e:	460b      	mov	r3, r1
 8001890:	73fb      	strb	r3, [r7, #15]
		rtc_time->minutes = (tens*10 + ones);
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	461a      	mov	r2, r3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	705a      	strb	r2, [r3, #1]
}
 80018a8:	e011      	b.n	80018ce <updateClockTime+0x1c6>
	else if(alarmClockSetNum == 4)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d10e      	bne.n	80018ce <updateClockTime+0x1c6>
		if(rtc_time->time_format == TIME_FORMAT_12HRS_PM)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d103      	bne.n	80018c0 <updateClockTime+0x1b8>
			rtc_time->time_format = TIME_FORMAT_12HRS_AM;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	70da      	strb	r2, [r3, #3]
}
 80018be:	e006      	b.n	80018ce <updateClockTime+0x1c6>
		else if(rtc_time->time_format == TIME_FORMAT_12HRS_AM)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <updateClockTime+0x1c6>
			rtc_time->time_format = TIME_FORMAT_12HRS_PM;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	70da      	strb	r2, [r3, #3]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	55555556 	.word	0x55555556
 80018e0:	66666667 	.word	0x66666667
 80018e4:	aaaaaaab 	.word	0xaaaaaaab

080018e8 <I2C_initalize>:

void I2C_initalize(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	//Configure the gpio pins B6 and B7 for I2C -> both need to be AF and open drain value of 1101
	GPIOB->CRL &= ~(0xF << 24);
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <I2C_initalize+0x80>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <I2C_initalize+0x80>)
 80018f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80018f6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 24);
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <I2C_initalize+0x80>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <I2C_initalize+0x80>)
 80018fe:	f043 6350 	orr.w	r3, r3, #218103808	; 0xd000000
 8001902:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 28);
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <I2C_initalize+0x80>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a17      	ldr	r2, [pc, #92]	; (8001968 <I2C_initalize+0x80>)
 800190a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800190e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 28);
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <I2C_initalize+0x80>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <I2C_initalize+0x80>)
 8001916:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
 800191a:	6013      	str	r3, [r2, #0]

	//Set the frequency of clock provided to cr2
	I2C1->CR2 |= ((HSI_SPEED/1000000));
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <I2C_initalize+0x84>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <I2C_initalize+0x84>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6053      	str	r3, [r2, #4]


	//Configure the device address will maybe do
	I2C1->OAR1 |= (0x61 << 1);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <I2C_initalize+0x84>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <I2C_initalize+0x84>)
 800192e:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 8001932:	6093      	str	r3, [r2, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	I2C1->OAR1 |= (1<<14);
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <I2C_initalize+0x84>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <I2C_initalize+0x84>)
 800193a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193e:	6093      	str	r3, [r2, #8]

	//Set the CCR
	I2C1->CCR |= ((HSI_SPEED / (2*I2C_SCL_SPEED_SM)));
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <I2C_initalize+0x84>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <I2C_initalize+0x84>)
 8001946:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800194a:	61d3      	str	r3, [r2, #28]

	//Set the trise value
	I2C1->TRISE =(((HSI_SPEED / 1000000) + 1) & 0x3F);
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <I2C_initalize+0x84>)
 800194e:	2209      	movs	r2, #9
 8001950:	621a      	str	r2, [r3, #32]

	//Enable the I2C
	I2C1->CR1 |= 1;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <I2C_initalize+0x84>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <I2C_initalize+0x84>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40005400 	.word	0x40005400

08001970 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001974:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	; (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	; (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800199e:	f000 f811 	bl	80019c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019a2:	f7ff fa45 	bl	8000e30 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 80019a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80019b4:	08001a2c 	.word	0x08001a2c
  ldr r2, =_sbss
 80019b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80019bc:	200000b8 	.word	0x200000b8

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>
	...

080019c4 <__libc_init_array>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	2600      	movs	r6, #0
 80019c8:	4d0c      	ldr	r5, [pc, #48]	; (80019fc <__libc_init_array+0x38>)
 80019ca:	4c0d      	ldr	r4, [pc, #52]	; (8001a00 <__libc_init_array+0x3c>)
 80019cc:	1b64      	subs	r4, r4, r5
 80019ce:	10a4      	asrs	r4, r4, #2
 80019d0:	42a6      	cmp	r6, r4
 80019d2:	d109      	bne.n	80019e8 <__libc_init_array+0x24>
 80019d4:	f000 f81a 	bl	8001a0c <_init>
 80019d8:	2600      	movs	r6, #0
 80019da:	4d0a      	ldr	r5, [pc, #40]	; (8001a04 <__libc_init_array+0x40>)
 80019dc:	4c0a      	ldr	r4, [pc, #40]	; (8001a08 <__libc_init_array+0x44>)
 80019de:	1b64      	subs	r4, r4, r5
 80019e0:	10a4      	asrs	r4, r4, #2
 80019e2:	42a6      	cmp	r6, r4
 80019e4:	d105      	bne.n	80019f2 <__libc_init_array+0x2e>
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ec:	4798      	blx	r3
 80019ee:	3601      	adds	r6, #1
 80019f0:	e7ee      	b.n	80019d0 <__libc_init_array+0xc>
 80019f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f6:	4798      	blx	r3
 80019f8:	3601      	adds	r6, #1
 80019fa:	e7f2      	b.n	80019e2 <__libc_init_array+0x1e>
 80019fc:	08001a24 	.word	0x08001a24
 8001a00:	08001a24 	.word	0x08001a24
 8001a04:	08001a24 	.word	0x08001a24
 8001a08:	08001a28 	.word	0x08001a28

08001a0c <_init>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	bf00      	nop
 8001a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a12:	bc08      	pop	{r3}
 8001a14:	469e      	mov	lr, r3
 8001a16:	4770      	bx	lr

08001a18 <_fini>:
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	bf00      	nop
 8001a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1e:	bc08      	pop	{r3}
 8001a20:	469e      	mov	lr, r3
 8001a22:	4770      	bx	lr
