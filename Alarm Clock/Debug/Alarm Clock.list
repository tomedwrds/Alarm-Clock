
Alarm Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000698  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007c8  080007d0  000107d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007c8  080007c8  000107d0  2**0
                  CONTENTS
  4 .ARM          00000000  080007c8  080007c8  000107d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007c8  080007d0  000107d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007c8  080007c8  000107c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007cc  080007cc  000107cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  080007d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080007d0  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d0  00000000  00000000  000107f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000233  00000000  00000000  00010ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00011100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e67  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000947  00000000  00000000  0001307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008722  00000000  00000000  000139c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c0e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0001c138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007b0 	.word	0x080007b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007b0 	.word	0x080007b0

08000170 <binary_to_bcd>:

RTC_time_t current_time;


uint8_t binary_to_bcd(uint8_t value)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	uint8_t tens, ones,bcd;
	//If only 1s bcd value is the same as binary
	bcd = value;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	2b09      	cmp	r3, #9
 8000182:	d918      	bls.n	80001b6 <binary_to_bcd+0x46>
	{
		tens = value/10;
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	4a0f      	ldr	r2, [pc, #60]	; (80001c4 <binary_to_bcd+0x54>)
 8000188:	fba2 2303 	umull	r2, r3, r2, r3
 800018c:	08db      	lsrs	r3, r3, #3
 800018e:	73bb      	strb	r3, [r7, #14]
		ones = value %10;
 8000190:	79fa      	ldrb	r2, [r7, #7]
 8000192:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <binary_to_bcd+0x54>)
 8000194:	fba3 1302 	umull	r1, r3, r3, r2
 8000198:	08d9      	lsrs	r1, r3, #3
 800019a:	460b      	mov	r3, r1
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	440b      	add	r3, r1
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((tens<<4)|ones );
 80001a6:	7bbb      	ldrb	r3, [r7, #14]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	b25a      	sxtb	r2, r3
 80001ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80001b0:	4313      	orrs	r3, r2
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	cccccccd 	.word	0xcccccccd

080001c8 <I2C_RXTX_Start>:
}



uint8_t  I2C_RXTX_Start(uint8_t * pTXBuffer, uint32_t Len, uint8_t sr,uint8_t RXTX,uint8_t value,uint8_t reg_addr)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	460b      	mov	r3, r1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	4613      	mov	r3, r2
 80001dc:	71bb      	strb	r3, [r7, #6]
	//Check if the state isnt busy recieving or transmitting
	if( (I2C_state != I2C_BUSY_IN_TX) && (I2C_state != I2C_BUSY_IN_RX))
 80001de:	4b22      	ldr	r3, [pc, #136]	; (8000268 <I2C_RXTX_Start+0xa0>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d039      	beq.n	800025a <I2C_RXTX_Start+0x92>
 80001e6:	4b20      	ldr	r3, [pc, #128]	; (8000268 <I2C_RXTX_Start+0xa0>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d035      	beq.n	800025a <I2C_RXTX_Start+0x92>
	{
		tx[0]=reg_addr;
 80001ee:	4a1f      	ldr	r2, [pc, #124]	; (800026c <I2C_RXTX_Start+0xa4>)
 80001f0:	7f3b      	ldrb	r3, [r7, #28]
 80001f2:	7013      	strb	r3, [r2, #0]
			tx[1] = value;
 80001f4:	4a1d      	ldr	r2, [pc, #116]	; (800026c <I2C_RXTX_Start+0xa4>)
 80001f6:	7e3b      	ldrb	r3, [r7, #24]
 80001f8:	7053      	strb	r3, [r2, #1]
		//Set the I2C state and other global vars
		I2C_state = RXTX;
 80001fa:	4a1b      	ldr	r2, [pc, #108]	; (8000268 <I2C_RXTX_Start+0xa0>)
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	7013      	strb	r3, [r2, #0]
		pBuffer = pTXBuffer;
 8000200:	4a1b      	ldr	r2, [pc, #108]	; (8000270 <I2C_RXTX_Start+0xa8>)
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	6013      	str	r3, [r2, #0]
		len = Len;
 8000206:	4a1b      	ldr	r2, [pc, #108]	; (8000274 <I2C_RXTX_Start+0xac>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	6013      	str	r3, [r2, #0]
		repeatedStart = sr;
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <I2C_RXTX_Start+0xb0>)
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	7013      	strb	r3, [r2, #0]

		if(I2C_state == I2C_BUSY_IN_RX)
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <I2C_RXTX_Start+0xa0>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d105      	bne.n	8000226 <I2C_RXTX_Start+0x5e>
		{
			//Addtionally acking should be enabled if recieving
			I2C1->CR1 |= (1<< 10);
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <I2C_RXTX_Start+0xb4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000224:	6013      	str	r3, [r2, #0]
		}


		//Generate START Condition
		I2C1->CR1 |= (1<< 8);
 8000226:	4b15      	ldr	r3, [pc, #84]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a14      	ldr	r2, [pc, #80]	; (800027c <I2C_RXTX_Start+0xb4>)
 800022c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000230:	6013      	str	r3, [r2, #0]

		//Implement the code to enable ITBUFEN Control Bit
		I2C1->CR2 |= ( 1 << 10);
 8000232:	4b12      	ldr	r3, [pc, #72]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	4a11      	ldr	r2, [pc, #68]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800023c:	6053      	str	r3, [r2, #4]

		//Implement the code to enable ITEVFEN Control Bit
		I2C1->CR2 |= ( 1 << 9);
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	4a0e      	ldr	r2, [pc, #56]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000248:	6053      	str	r3, [r2, #4]

		//Implement the code to enable ITERREN Control Bit
		I2C1->CR2 |= ( 1 << 8);
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <I2C_RXTX_Start+0xb4>)
 800024c:	685b      	ldr	r3, [r3, #4]
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <I2C_RXTX_Start+0xb4>)
 8000250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000254:	6053      	str	r3, [r2, #4]

		return I2C_READY;
 8000256:	2300      	movs	r3, #0
 8000258:	e001      	b.n	800025e <I2C_RXTX_Start+0x96>


	}
	return I2C_state;
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C_RXTX_Start+0xa0>)
 800025c:	781b      	ldrb	r3, [r3, #0]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	20000025 	.word	0x20000025
 800026c:	20000028 	.word	0x20000028
 8000270:	2000001c 	.word	0x2000001c
 8000274:	20000020 	.word	0x20000020
 8000278:	20000024 	.word	0x20000024
 800027c:	40005400 	.word	0x40005400

08000280 <ds1307_write>:

static void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
	//Sends two bytes of data to enable the clock


	while(I2C_RXTX_Start(tx, 2, 0,I2C_BUSY_IN_TX,value,reg_addr) != I2C_READY);
 8000290:	bf00      	nop
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2302      	movs	r3, #2
 800029c:	2200      	movs	r2, #0
 800029e:	2102      	movs	r1, #2
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <ds1307_write+0x38>)
 80002a2:	f7ff ff91 	bl	80001c8 <I2C_RXTX_Start>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1f2      	bne.n	8000292 <ds1307_write+0x12>
}
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000028 	.word	0x20000028

080002bc <ds1307_set_current_time>:




void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff51 	bl	8000170 <binary_to_bcd>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73bb      	strb	r3, [r7, #14]
	//Ensure bit 7 is cleared to not turn of clock
	seconds &= ~(1<<7);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002d8:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds,DS1307_ADDR_SEC);
 80002da:	7bbb      	ldrb	r3, [r7, #14]
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffce 	bl	8000280 <ds1307_write>

	//send minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff41 	bl	8000170 <binary_to_bcd>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2101      	movs	r1, #1
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ffc4 	bl	8000280 <ds1307_write>

	//set hours
	hrs = binary_to_bcd(rtc_time->hours);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff37 	bl	8000170 <binary_to_bcd>
 8000302:	4603      	mov	r3, r0
 8000304:	73fb      	strb	r3, [r7, #15]
	//Ensure bit 7 is cleared to not turn of clock
	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	78db      	ldrb	r3, [r3, #3]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d104      	bne.n	8000318 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000314:	73fb      	strb	r3, [r7, #15]
 8000316:	e011      	b.n	800033c <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031e:	73fb      	strb	r3, [r7, #15]
		hrs =(rtc_time->time_format ==TIME_FORMAT_12HRS_PM ) ? hrs | (1<<5) : hrs & ~(1<<5);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	78db      	ldrb	r3, [r3, #3]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d104      	bne.n	8000332 <ds1307_set_current_time+0x76>
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	b2db      	uxtb	r3, r3
 8000330:	e003      	b.n	800033a <ds1307_set_current_time+0x7e>
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	f023 0320 	bic.w	r3, r3, #32
 8000338:	b2db      	uxtb	r3, r3
 800033a:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2102      	movs	r1, #2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff9d 	bl	8000280 <ds1307_write>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <main>:

RTC_time_t current_time;
uint32_t button_processed = 0, lastDebounceTime;

int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0


    /* Loop forever */
	uint32_t *RCC_APB2ENR = (uint32_t *)(0x40021018);
 8000356:	4b7b      	ldr	r3, [pc, #492]	; (8000544 <main+0x1f4>)
 8000358:	617b      	str	r3, [r7, #20]
	uint32_t *RCC_APB1ENR = (uint32_t *)(0x4002101C);
 800035a:	4b7b      	ldr	r3, [pc, #492]	; (8000548 <main+0x1f8>)
 800035c:	613b      	str	r3, [r7, #16]
	uint32_t *AFIO_EXTICR1 =  (uint32_t *)(0x40010008);
 800035e:	4b7b      	ldr	r3, [pc, #492]	; (800054c <main+0x1fc>)
 8000360:	60fb      	str	r3, [r7, #12]
	uint32_t *EXTI_IMR =  (uint32_t *)(0x40010400);
 8000362:	4b7b      	ldr	r3, [pc, #492]	; (8000550 <main+0x200>)
 8000364:	60bb      	str	r3, [r7, #8]
	uint32_t *EXTI_RTSR =  (uint32_t *)(0x40010408);
 8000366:	4b7b      	ldr	r3, [pc, #492]	; (8000554 <main+0x204>)
 8000368:	607b      	str	r3, [r7, #4]


	//Enable clock on GPIOA, GPIOB, AFIO,TIM1 and I2C1
	*RCC_APB2ENR |= (1 << 2);
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f043 0204 	orr.w	r2, r3, #4
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 3);
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f043 0208 	orr.w	r2, r3, #8
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 0);
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f043 0201 	orr.w	r2, r3, #1
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1<< 11);
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 21);
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	601a      	str	r2, [r3, #0]


	//Enable interupts for I2C for both event and error I2C and EXTI lines 0 and 1
	*((uint32_t*)NVIC_ISER0) |= 1<<6;
 80003a6:	4b6c      	ldr	r3, [pc, #432]	; (8000558 <main+0x208>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a6b      	ldr	r2, [pc, #428]	; (8000558 <main+0x208>)
 80003ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b0:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<7;
 80003b2:	4b69      	ldr	r3, [pc, #420]	; (8000558 <main+0x208>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a68      	ldr	r2, [pc, #416]	; (8000558 <main+0x208>)
 80003b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003bc:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<31;
 80003be:	4b66      	ldr	r3, [pc, #408]	; (8000558 <main+0x208>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a65      	ldr	r2, [pc, #404]	; (8000558 <main+0x208>)
 80003c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003c8:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER1) |= 1<<0;
 80003ca:	4b64      	ldr	r3, [pc, #400]	; (800055c <main+0x20c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a63      	ldr	r2, [pc, #396]	; (800055c <main+0x20c>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]

	//Set the GPIOA ports to work for LEDS
	uint32_t temp = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	603b      	str	r3, [r7, #0]
	temp |= (1<< 0);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	603b      	str	r3, [r7, #0]
	temp |= (1<< 4);
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	603b      	str	r3, [r7, #0]
	temp |= (1<< 8);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f0:	603b      	str	r3, [r7, #0]
	temp |= (1<< 12);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f8:	603b      	str	r3, [r7, #0]
	temp |= (1<< 16);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000400:	603b      	str	r3, [r7, #0]
	temp |= (1<< 20);
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000408:	603b      	str	r3, [r7, #0]
	temp |= (1<< 24);
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000410:	603b      	str	r3, [r7, #0]
	temp |= (1<< 28);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	603b      	str	r3, [r7, #0]
	GPIOA->CRL = temp;
 800041a:	4a51      	ldr	r2, [pc, #324]	; (8000560 <main+0x210>)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	6013      	str	r3, [r2, #0]

	//Setup the pins for the buttons and the alarm LED

	//B0 for mode button and B1 for set button
	//Set the Configuration to Input Pullup
	GPIOB->CRL &= ~(0xF << 0);
 8000420:	4b50      	ldr	r3, [pc, #320]	; (8000564 <main+0x214>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a4f      	ldr	r2, [pc, #316]	; (8000564 <main+0x214>)
 8000426:	f023 030f 	bic.w	r3, r3, #15
 800042a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x8 << 0);
 800042c:	4b4d      	ldr	r3, [pc, #308]	; (8000564 <main+0x214>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a4c      	ldr	r2, [pc, #304]	; (8000564 <main+0x214>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6013      	str	r3, [r2, #0]
	//SEt PBODR to 1 to enable pull up
	//GPIOB->ODR |= (1<< 0);
	//Configure AFIO line so EXTI0 is on Port B
	*AFIO_EXTICR1 |= (1<< 0);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f043 0201 	orr.w	r2, r3, #1
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	601a      	str	r2, [r3, #0]

	//Configure the EXTI by demasking the line and setting the trigger on rising edge
	*EXTI_IMR |= (1<< 0);
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f043 0201 	orr.w	r2, r3, #1
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	601a      	str	r2, [r3, #0]
	*EXTI_RTSR |= (1<< 0);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f043 0201 	orr.w	r2, r3, #1
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	601a      	str	r2, [r3, #0]

	//Configure the timer that handles long / short press

	//Set the PSC value
	TIM1->PSC |= (8000-1);
 800045c:	4b42      	ldr	r3, [pc, #264]	; (8000568 <main+0x218>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	4a41      	ldr	r2, [pc, #260]	; (8000568 <main+0x218>)
 8000462:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000466:	f043 031f 	orr.w	r3, r3, #31
 800046a:	6293      	str	r3, [r2, #40]	; 0x28

	//Set the autoreload value

	//Enable the timer
	TIM1->CR1 |= 1;
 800046c:	4b3e      	ldr	r3, [pc, #248]	; (8000568 <main+0x218>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a3d      	ldr	r2, [pc, #244]	; (8000568 <main+0x218>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]




	//Configure the pins B8 and B9 for I2C -> both need to be AF and open drain value of 1101
	GPIOB->CRL &= ~(0xF << 24);
 8000478:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <main+0x214>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a39      	ldr	r2, [pc, #228]	; (8000564 <main+0x214>)
 800047e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000482:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 24);
 8000484:	4b37      	ldr	r3, [pc, #220]	; (8000564 <main+0x214>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a36      	ldr	r2, [pc, #216]	; (8000564 <main+0x214>)
 800048a:	f043 6350 	orr.w	r3, r3, #218103808	; 0xd000000
 800048e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 28);
 8000490:	4b34      	ldr	r3, [pc, #208]	; (8000564 <main+0x214>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a33      	ldr	r2, [pc, #204]	; (8000564 <main+0x214>)
 8000496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800049a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 28);
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <main+0x214>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a30      	ldr	r2, [pc, #192]	; (8000564 <main+0x214>)
 80004a2:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
 80004a6:	6013      	str	r3, [r2, #0]



	//Set the frequency of clock provided to cr2
	I2C1->CR2 |= ((HSI_SPEED/1000000));
 80004a8:	4b30      	ldr	r3, [pc, #192]	; (800056c <main+0x21c>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	; (800056c <main+0x21c>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6053      	str	r3, [r2, #4]


	//Configure the device address will maybe do
	I2C1->OAR1 |= (0x61 << 1);
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <main+0x21c>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4a2c      	ldr	r2, [pc, #176]	; (800056c <main+0x21c>)
 80004ba:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 80004be:	6093      	str	r3, [r2, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	I2C1->OAR1 |= (1<<14);
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <main+0x21c>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a29      	ldr	r2, [pc, #164]	; (800056c <main+0x21c>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6093      	str	r3, [r2, #8]

	//Set the CCR
	I2C1->CCR |= ((HSI_SPEED / (2*I2C_SCL_SPEED_SM)));
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <main+0x21c>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <main+0x21c>)
 80004d2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80004d6:	61d3      	str	r3, [r2, #28]

	//Set the trise value
	I2C1->TRISE =(((HSI_SPEED / 1000000) + 1) & 0x3F);
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <main+0x21c>)
 80004da:	2209      	movs	r2, #9
 80004dc:	621a      	str	r2, [r3, #32]

	//Enable the I2C
	I2C1->CR1 |= 1;
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <main+0x21c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <main+0x21c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]


	I2C_state= I2C_READY;
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <main+0x220>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]

	//Make clock halt = 0 in DS peripheal
	ds1307_write(0x0, DS1307_ADDR_SEC);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff fec4 	bl	8000280 <ds1307_write>


	current_time.seconds = 34;
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <main+0x224>)
 80004fa:	2222      	movs	r2, #34	; 0x22
 80004fc:	701a      	strb	r2, [r3, #0]
	current_time.hours = 8;
 80004fe:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <main+0x224>)
 8000500:	2208      	movs	r2, #8
 8000502:	709a      	strb	r2, [r3, #2]
	current_time.minutes = 42;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <main+0x224>)
 8000506:	222a      	movs	r2, #42	; 0x2a
 8000508:	705a      	strb	r2, [r3, #1]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <main+0x224>)
 800050c:	2201      	movs	r2, #1
 800050e:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_time(&current_time);
 8000510:	4818      	ldr	r0, [pc, #96]	; (8000574 <main+0x224>)
 8000512:	f7ff fed3 	bl	80002bc <ds1307_set_current_time>


	while(1)
	{
		if((GPIOB->IDR & 1) && !button_processed && ((TIM1->CNT - lastDebounceTime) > 500))
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <main+0x214>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f9      	beq.n	8000516 <main+0x1c6>
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <main+0x228>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f5      	bne.n	8000516 <main+0x1c6>
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x218>)
 800052c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <main+0x22c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000538:	d9ed      	bls.n	8000516 <main+0x1c6>
		{
			button_processed = 1;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x228>)
 800053c:	2201      	movs	r2, #1
 800053e:	601a      	str	r2, [r3, #0]
		if((GPIOB->IDR & 1) && !button_processed && ((TIM1->CNT - lastDebounceTime) > 500))
 8000540:	e7e9      	b.n	8000516 <main+0x1c6>
 8000542:	bf00      	nop
 8000544:	40021018 	.word	0x40021018
 8000548:	4002101c 	.word	0x4002101c
 800054c:	40010008 	.word	0x40010008
 8000550:	40010400 	.word	0x40010400
 8000554:	40010408 	.word	0x40010408
 8000558:	e000e100 	.word	0xe000e100
 800055c:	e000e104 	.word	0xe000e104
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00
 8000568:	40012c00 	.word	0x40012c00
 800056c:	40005400 	.word	0x40005400
 8000570:	20000025 	.word	0x20000025
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000030 	.word	0x20000030
 800057c:	20000034 	.word	0x20000034

08000580 <I2C1_EV_IRQHandler>:


}

void I2C1_EV_IRQHandler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	//SB bit set
	if(I2C1->SR1 & 1)
 8000586:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d00a      	beq.n	80005a8 <I2C1_EV_IRQHandler+0x28>
	{
		//SB bit cleared by wirting slave address to DR

		//In case of TX
		 if(I2C_state == I2C_BUSY_IN_TX)
 8000592:	4b49      	ldr	r3, [pc, #292]	; (80006b8 <I2C1_EV_IRQHandler+0x138>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d103      	bne.n	80005a2 <I2C1_EV_IRQHandler+0x22>
		 {
			//As writing bit 0 must be cleared
			I2C1->DR = ((DS1307_DEVICE_ADDR << 1) & ~1);
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800059c:	22d0      	movs	r2, #208	; 0xd0
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	e002      	b.n	80005a8 <I2C1_EV_IRQHandler+0x28>
		 }
		 else
		 {
			 I2C1->DR = ((DS1307_DEVICE_ADDR << 1)  | 1);
 80005a2:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005a4:	22d1      	movs	r2, #209	; 0xd1
 80005a6:	611a      	str	r2, [r3, #16]

	}


	//ADDR flag set
	 if(I2C1->SR1& (1<< 1))
 80005a8:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d015      	beq.n	80005e0 <I2C1_EV_IRQHandler+0x60>
	 {
		 //ADDR flag cleared by reading SR1 then SR2
		//Write first byte of data
		 uint32_t dummyread;
		 dummyread = I2C1->SR1;
 80005b4:	4b3f      	ldr	r3, [pc, #252]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	607b      	str	r3, [r7, #4]
		 dummyread = I2C1->SR2;
 80005ba:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	607b      	str	r3, [r7, #4]
		 (void)dummyread;


		 //In case of RX
		 if(I2C_state == I2C_BUSY_IN_RX)
 80005c0:	4b3d      	ldr	r3, [pc, #244]	; (80006b8 <I2C1_EV_IRQHandler+0x138>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10b      	bne.n	80005e0 <I2C1_EV_IRQHandler+0x60>
		 {
			 //ACKING MUST BE DISABLED HERE IN CASE
			 I2C1->CR1 &= ~(1<< 10);
 80005c8:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005d2:	6013      	str	r3, [r2, #0]
			 //Generate stop condition
			 I2C1->CR1 |= (1<< 9);
 80005d4:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a36      	ldr	r2, [pc, #216]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005de:	6013      	str	r3, [r2, #0]
		 }

	 }

	 //BTF set close communication
	 if(I2C1->SR1& (1<< 2))
 80005e0:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d024      	beq.n	8000636 <I2C1_EV_IRQHandler+0xb6>
	 {
		 //TXE should also be set
		 if(I2C1->SR1& (1<< 7))
 80005ec:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d01e      	beq.n	8000636 <I2C1_EV_IRQHandler+0xb6>
		 {
			 //Len should also equal 0
			 if(len == 0)
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <I2C1_EV_IRQHandler+0x13c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11a      	bne.n	8000636 <I2C1_EV_IRQHandler+0xb6>
			 {
				 //Generate the stop conidtion
				 I2C1->CR1 |= (1<< 9);
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a2b      	ldr	r2, [pc, #172]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060a:	6013      	str	r3, [r2, #0]

				 //Disable the interupts
				 //Implement the code to enable ITBUFEN Control Bit
				I2C1->CR2 &= ~( 1 << 10);
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000616:	6053      	str	r3, [r2, #4]

				//Implement the code to enable ITEVFEN Control Bit
				I2C1->CR2 &= ~( 1 << 9);
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800061e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000622:	6053      	str	r3, [r2, #4]

				//Implement the code to enable ITERREN Control Bit
				I2C1->CR2 &= ~( 1 << 8);
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800062a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800062e:	6053      	str	r3, [r2, #4]

				I2C_state= I2C_READY;
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <I2C1_EV_IRQHandler+0x138>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
			 }
		 }
	 }

	//TXE set
	if(I2C1->SR1& (1<< 7))
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	2b00      	cmp	r3, #0
 8000640:	d012      	beq.n	8000668 <I2C1_EV_IRQHandler+0xe8>
	{
		//write data into DR
		if(len > 0)
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <I2C1_EV_IRQHandler+0x13c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00e      	beq.n	8000668 <I2C1_EV_IRQHandler+0xe8>
		{
			//1. load the data in to DR
			I2C1->DR = *(pBuffer);
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <I2C1_EV_IRQHandler+0x140>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000652:	611a      	str	r2, [r3, #16]

			//2. decrement the TxLen
			len--;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <I2C1_EV_IRQHandler+0x13c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <I2C1_EV_IRQHandler+0x13c>)
 800065c:	6013      	str	r3, [r2, #0]

			//3. Increment the buffer address
			pBuffer++;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <I2C1_EV_IRQHandler+0x140>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <I2C1_EV_IRQHandler+0x140>)
 8000666:	6013      	str	r3, [r2, #0]

		}
	}

	//RXNE set
	if(I2C1->SR1& (1<< 6))
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000670:	2b00      	cmp	r3, #0
 8000672:	d019      	beq.n	80006a8 <I2C1_EV_IRQHandler+0x128>
	{
		//End of event

		//Read the data from the data register to clear the RXNE flag
		loadedData = I2C1->DR;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <I2C1_EV_IRQHandler+0x144>)
 800067c:	701a      	strb	r2, [r3, #0]
		//Implement the code to enable ITBUFEN Control Bit
						I2C1->CR2 &= ~( 1 << 10);
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000688:	6053      	str	r3, [r2, #4]

						//Implement the code to enable ITEVFEN Control Bit
						I2C1->CR2 &= ~( 1 << 9);
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000694:	6053      	str	r3, [r2, #4]

						//Implement the code to enable ITERREN Control Bit
						I2C1->CR2 &= ~( 1 << 8);
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <I2C1_EV_IRQHandler+0x134>)
 800069c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006a0:	6053      	str	r3, [r2, #4]

						I2C_state= I2C_READY;
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <I2C1_EV_IRQHandler+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]


	}


}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40005400 	.word	0x40005400
 80006b8:	20000025 	.word	0x20000025
 80006bc:	20000020 	.word	0x20000020
 80006c0:	2000001c 	.word	0x2000001c
 80006c4:	2000002a 	.word	0x2000002a

080006c8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR =  (uint32_t *)(0x40010414);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <EXTI0_IRQHandler+0x30>)
 80006d0:	607b      	str	r3, [r7, #4]
	//Set debounce time
	lastDebounceTime = TIM1->CNT;
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <EXTI0_IRQHandler+0x34>)
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <EXTI0_IRQHandler+0x38>)
 80006d8:	6013      	str	r3, [r2, #0]
	button_processed = 0;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <EXTI0_IRQHandler+0x3c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]

	//Clear interupt
	*EXTI_PR |= 1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f043 0201 	orr.w	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]

}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40010414 	.word	0x40010414
 80006fc:	40012c00 	.word	0x40012c00
 8000700:	20000034 	.word	0x20000034
 8000704:	20000030 	.word	0x20000030

08000708 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000716:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000718:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000742:	f000 f811 	bl	8000768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fe03 	bl	8000350 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800074c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000758:	080007d0 	.word	0x080007d0
  ldr r2, =_sbss
 800075c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000760:	20000038 	.word	0x20000038

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <__libc_init_array>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	2600      	movs	r6, #0
 800076c:	4d0c      	ldr	r5, [pc, #48]	; (80007a0 <__libc_init_array+0x38>)
 800076e:	4c0d      	ldr	r4, [pc, #52]	; (80007a4 <__libc_init_array+0x3c>)
 8000770:	1b64      	subs	r4, r4, r5
 8000772:	10a4      	asrs	r4, r4, #2
 8000774:	42a6      	cmp	r6, r4
 8000776:	d109      	bne.n	800078c <__libc_init_array+0x24>
 8000778:	f000 f81a 	bl	80007b0 <_init>
 800077c:	2600      	movs	r6, #0
 800077e:	4d0a      	ldr	r5, [pc, #40]	; (80007a8 <__libc_init_array+0x40>)
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <__libc_init_array+0x44>)
 8000782:	1b64      	subs	r4, r4, r5
 8000784:	10a4      	asrs	r4, r4, #2
 8000786:	42a6      	cmp	r6, r4
 8000788:	d105      	bne.n	8000796 <__libc_init_array+0x2e>
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000790:	4798      	blx	r3
 8000792:	3601      	adds	r6, #1
 8000794:	e7ee      	b.n	8000774 <__libc_init_array+0xc>
 8000796:	f855 3b04 	ldr.w	r3, [r5], #4
 800079a:	4798      	blx	r3
 800079c:	3601      	adds	r6, #1
 800079e:	e7f2      	b.n	8000786 <__libc_init_array+0x1e>
 80007a0:	080007c8 	.word	0x080007c8
 80007a4:	080007c8 	.word	0x080007c8
 80007a8:	080007c8 	.word	0x080007c8
 80007ac:	080007cc 	.word	0x080007cc

080007b0 <_init>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr

080007bc <_fini>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	bf00      	nop
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr
