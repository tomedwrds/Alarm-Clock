
Alarm Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000994  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ac4  08000acc  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac4  08000acc  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac4  08000ac4  00010ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000acc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000acc  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c52  00000000  00000000  00010af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003bc  00000000  00000000  00011747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00011b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00011cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002369  00000000  00000000  00011ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000019cc  00000000  00000000  00014209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008791  00000000  00000000  00015bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001e366  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000690  00000000  00000000  0001e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000aac 	.word	0x08000aac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000aac 	.word	0x08000aac

08000170 <LED_Initalize>:
#include "alarmled.h"



void LED_Initalize(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]



	//Initalize lower register of GPIOA first
	temp |= (1<< 0);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f043 0310 	orr.w	r3, r3, #16
 8000188:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000190:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000198:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001a0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a8:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001b8:	607b      	str	r3, [r7, #4]
	GPIOA->CRL = temp;
 80001ba:	4a43      	ldr	r2, [pc, #268]	; (80002c8 <LED_Initalize+0x158>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	6013      	str	r3, [r2, #0]

	//GPIOA high register in this case GPIOA pins 13, 14,15 need to remain untouched
	//So will first clear all reigsters apart from these two then or operations
	GPIOA->CRH &= (0xFFF<<20);
 80001c0:	4b41      	ldr	r3, [pc, #260]	; (80002c8 <LED_Initalize+0x158>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a40      	ldr	r2, [pc, #256]	; (80002c8 <LED_Initalize+0x158>)
 80001c6:	0d1b      	lsrs	r3, r3, #20
 80001c8:	051b      	lsls	r3, r3, #20
 80001ca:	6053      	str	r3, [r2, #4]
	temp = 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	607b      	str	r3, [r7, #4]
	temp |= (1<< 0);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f043 0310 	orr.w	r3, r3, #16
 80001de:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001e6:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001ee:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001f6:	607b      	str	r3, [r7, #4]
	GPIOA->CRH |= temp;
 80001f8:	4b33      	ldr	r3, [pc, #204]	; (80002c8 <LED_Initalize+0x158>)
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	4932      	ldr	r1, [pc, #200]	; (80002c8 <LED_Initalize+0x158>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4313      	orrs	r3, r2
 8000202:	604b      	str	r3, [r1, #4]

	GPIOB->ODR &= ~(0x3 << 3);
 8000204:	4b31      	ldr	r3, [pc, #196]	; (80002cc <LED_Initalize+0x15c>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a30      	ldr	r2, [pc, #192]	; (80002cc <LED_Initalize+0x15c>)
 800020a:	f023 0318 	bic.w	r3, r3, #24
 800020e:	60d3      	str	r3, [r2, #12]

	//GPIOB low register in this case only need to set B3,B5
	GPIOB->CRL &= ~(0xF0F<<12);
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <LED_Initalize+0x15c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <LED_Initalize+0x15c>)
 8000216:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800021a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800021e:	6013      	str	r3, [r2, #0]
	temp = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000232:	607b      	str	r3, [r7, #4]
	GPIOB->CRL |= temp;
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <LED_Initalize+0x15c>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4924      	ldr	r1, [pc, #144]	; (80002cc <LED_Initalize+0x15c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4313      	orrs	r3, r2
 800023e:	600b      	str	r3, [r1, #0]

	//GPIO B high all registers are used
	temp = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	607b      	str	r3, [r7, #4]
	temp |= (1<< 0);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 4);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	607b      	str	r3, [r7, #4]
	temp |= (1<< 8);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 12);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000262:	607b      	str	r3, [r7, #4]
	temp |= (1<< 16);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000272:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800027a:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000282:	607b      	str	r3, [r7, #4]
	GPIOB->CRH = temp;
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <LED_Initalize+0x15c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6053      	str	r3, [r2, #4]

	//GPIO C high only 13 14 15 are used
	GPIOC->CRH &= ~(0xFFF << 20);
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <LED_Initalize+0x160>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <LED_Initalize+0x160>)
 8000290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000294:	6053      	str	r3, [r2, #4]
	temp = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
	temp |= (1<< 20);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002a0:	607b      	str	r3, [r7, #4]
	temp |= (1<< 24);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a8:	607b      	str	r3, [r7, #4]
	temp |= (1<< 28);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b0:	607b      	str	r3, [r7, #4]
	GPIOC->CRH |= temp;
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <LED_Initalize+0x160>)
 80002b4:	685a      	ldr	r2, [r3, #4]
 80002b6:	4906      	ldr	r1, [pc, #24]	; (80002d0 <LED_Initalize+0x160>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4313      	orrs	r3, r2
 80002bc:	604b      	str	r3, [r1, #4]

}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <main>:




int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0


    /* Loop forever */
	uint32_t *RCC_APB2ENR = (uint32_t *)(0x40021018);
 80002da:	4b9b      	ldr	r3, [pc, #620]	; (8000548 <main+0x274>)
 80002dc:	617b      	str	r3, [r7, #20]
	uint32_t *RCC_APB1ENR = (uint32_t *)(0x4002101C);
 80002de:	4b9b      	ldr	r3, [pc, #620]	; (800054c <main+0x278>)
 80002e0:	613b      	str	r3, [r7, #16]
	uint32_t *AFIO_EXTICR1 =  (uint32_t *)(0x40010008);
 80002e2:	4b9b      	ldr	r3, [pc, #620]	; (8000550 <main+0x27c>)
 80002e4:	60fb      	str	r3, [r7, #12]
	uint32_t *AFIO_MAPR = (uint32_t*)(0x40010004);
 80002e6:	4b9b      	ldr	r3, [pc, #620]	; (8000554 <main+0x280>)
 80002e8:	60bb      	str	r3, [r7, #8]

	uint32_t *EXTI_IMR =  (uint32_t *)(0x40010400);
 80002ea:	4b9b      	ldr	r3, [pc, #620]	; (8000558 <main+0x284>)
 80002ec:	607b      	str	r3, [r7, #4]
	uint32_t *EXTI_RTSR =  (uint32_t *)(0x40010408);
 80002ee:	4b9b      	ldr	r3, [pc, #620]	; (800055c <main+0x288>)
 80002f0:	603b      	str	r3, [r7, #0]


	//Enable clock on GPIOA, GPIOB, GPIOC AFIO,TIM1,TIM2,TIM3,TIM4 and I2C1

	*RCC_APB2ENR |= (1 << 0);
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 0201 	orr.w	r2, r3, #1
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 2);
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0204 	orr.w	r2, r3, #4
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 3);
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f043 0208 	orr.w	r2, r3, #8
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1 << 4);
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f043 0210 	orr.w	r2, r3, #16
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	601a      	str	r2, [r3, #0]
	*RCC_APB2ENR |= (1<< 11);
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 0);
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f043 0201 	orr.w	r2, r3, #1
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 1);
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0202 	orr.w	r2, r3, #2
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 2);
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f043 0204 	orr.w	r2, r3, #4
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	601a      	str	r2, [r3, #0]
	*RCC_APB1ENR |= (1<< 21);
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	601a      	str	r2, [r3, #0]
	*AFIO_MAPR |=(2<<24);
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	601a      	str	r2, [r3, #0]

	//Enable interupts for I2C for both event and error I2C and EXTI lines 0 and 1
	*((uint32_t*)NVIC_ISER0) |= 1<<6;
 800036a:	4b7d      	ldr	r3, [pc, #500]	; (8000560 <main+0x28c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a7c      	ldr	r2, [pc, #496]	; (8000560 <main+0x28c>)
 8000370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000374:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<7;
 8000376:	4b7a      	ldr	r3, [pc, #488]	; (8000560 <main+0x28c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a79      	ldr	r2, [pc, #484]	; (8000560 <main+0x28c>)
 800037c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000380:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<29;
 8000382:	4b77      	ldr	r3, [pc, #476]	; (8000560 <main+0x28c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a76      	ldr	r2, [pc, #472]	; (8000560 <main+0x28c>)
 8000388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800038c:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<30;
 800038e:	4b74      	ldr	r3, [pc, #464]	; (8000560 <main+0x28c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a73      	ldr	r2, [pc, #460]	; (8000560 <main+0x28c>)
 8000394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000398:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER0) |= 1<<31;
 800039a:	4b71      	ldr	r3, [pc, #452]	; (8000560 <main+0x28c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a70      	ldr	r2, [pc, #448]	; (8000560 <main+0x28c>)
 80003a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003a4:	6013      	str	r3, [r2, #0]
	*((uint32_t*)NVIC_ISER1) |= 1<<0;
 80003a6:	4b6f      	ldr	r3, [pc, #444]	; (8000564 <main+0x290>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a6e      	ldr	r2, [pc, #440]	; (8000564 <main+0x290>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]

	//Set the GPIOA ports to work for LEDS

	LED_Initalize();
 80003b2:	f7ff fedd 	bl	8000170 <LED_Initalize>

	//Setup the pins for the buttons and the alarm LED

	//B0 for mode button and B1 for set button
	//Set the Configuration to Input Pulldown
	GPIOB->CRL &= ~(0xF << 0);
 80003b6:	4b6c      	ldr	r3, [pc, #432]	; (8000568 <main+0x294>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a6b      	ldr	r2, [pc, #428]	; (8000568 <main+0x294>)
 80003bc:	f023 030f 	bic.w	r3, r3, #15
 80003c0:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x8 << 0);
 80003c2:	4b69      	ldr	r3, [pc, #420]	; (8000568 <main+0x294>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a68      	ldr	r2, [pc, #416]	; (8000568 <main+0x294>)
 80003c8:	f043 0308 	orr.w	r3, r3, #8
 80003cc:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 4);
 80003ce:	4b66      	ldr	r3, [pc, #408]	; (8000568 <main+0x294>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a65      	ldr	r2, [pc, #404]	; (8000568 <main+0x294>)
 80003d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003d8:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0x8 << 4);
 80003da:	4b63      	ldr	r3, [pc, #396]	; (8000568 <main+0x294>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a62      	ldr	r2, [pc, #392]	; (8000568 <main+0x294>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	6013      	str	r3, [r2, #0]

	//Configure AFIO line so EXTI0 is on Port B
	*AFIO_EXTICR1 |= (1<< 0);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
	*AFIO_EXTICR1 |= (1<< 4);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0210 	orr.w	r2, r3, #16
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]
	//Disable unused jtag pins to allow there use for gpio


	//Configure the EXTI by demasking the line and setting the trigger on rising edge
	*EXTI_IMR |= (1<< 0);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 0201 	orr.w	r2, r3, #1
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
	*EXTI_RTSR |= (1<< 0);
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0201 	orr.w	r2, r3, #1
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	601a      	str	r2, [r3, #0]
	*EXTI_IMR |= (1<< 1);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f043 0202 	orr.w	r2, r3, #2
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]
	*EXTI_RTSR |= (1<< 1);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f043 0202 	orr.w	r2, r3, #2
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	601a      	str	r2, [r3, #0]

	//Configure the timer that handles long / short press

	//Set the PSC value
	TIM1->PSC |= (8000-1);
 800042e:	4b4f      	ldr	r3, [pc, #316]	; (800056c <main+0x298>)
 8000430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000432:	4a4e      	ldr	r2, [pc, #312]	; (800056c <main+0x298>)
 8000434:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000438:	f043 031f 	orr.w	r3, r3, #31
 800043c:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->PSC |= (8000-1);
 800043e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 800044c:	f043 031f 	orr.w	r3, r3, #31
 8000450:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->PSC |= (8000-1);
 8000452:	4b47      	ldr	r3, [pc, #284]	; (8000570 <main+0x29c>)
 8000454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000456:	4a46      	ldr	r2, [pc, #280]	; (8000570 <main+0x29c>)
 8000458:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 800045c:	f043 031f 	orr.w	r3, r3, #31
 8000460:	6293      	str	r3, [r2, #40]	; 0x28
	TIM3->ARR = (4000-1);
 8000462:	4b43      	ldr	r3, [pc, #268]	; (8000570 <main+0x29c>)
 8000464:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= 1;
 800046a:	4b41      	ldr	r3, [pc, #260]	; (8000570 <main+0x29c>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	4a40      	ldr	r2, [pc, #256]	; (8000570 <main+0x29c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	60d3      	str	r3, [r2, #12]
	TIM4->PSC |= (8000-1);
 8000476:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <main+0x2a0>)
 8000478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047a:	4a3e      	ldr	r2, [pc, #248]	; (8000574 <main+0x2a0>)
 800047c:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8000480:	f043 031f 	orr.w	r3, r3, #31
 8000484:	6293      	str	r3, [r2, #40]	; 0x28
	TIM4->ARR = (1000-1);
 8000486:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <main+0x2a0>)
 8000488:	f240 32e7 	movw	r2, #999	; 0x3e7
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= 1;
 800048e:	4b39      	ldr	r3, [pc, #228]	; (8000574 <main+0x2a0>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a38      	ldr	r2, [pc, #224]	; (8000574 <main+0x2a0>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= 1 << 2;
 800049a:	4b36      	ldr	r3, [pc, #216]	; (8000574 <main+0x2a0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a35      	ldr	r2, [pc, #212]	; (8000574 <main+0x2a0>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1 << 1;
 80004a6:	4b32      	ldr	r3, [pc, #200]	; (8000570 <main+0x29c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a31      	ldr	r2, [pc, #196]	; (8000570 <main+0x29c>)
 80004ac:	f043 0302 	orr.w	r3, r3, #2
 80004b0:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1 << 2;
 80004b2:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <main+0x29c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a2e      	ldr	r2, [pc, #184]	; (8000570 <main+0x29c>)
 80004b8:	f043 0304 	orr.w	r3, r3, #4
 80004bc:	6013      	str	r3, [r2, #0]

	//Enable the timer
	TIM1->CR1 |= 1;
 80004be:	4b2b      	ldr	r3, [pc, #172]	; (800056c <main+0x298>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a2a      	ldr	r2, [pc, #168]	; (800056c <main+0x298>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= 1;
 80004ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |= 1;
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <main+0x2a0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <main+0x2a0>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

//	TIM3->CR1 |= 1;



	TIM3->SR = 0;
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <main+0x29c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
	TIM3->CR1 &= ~(1 << 1);
 80004ec:	4b20      	ldr	r3, [pc, #128]	; (8000570 <main+0x29c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <main+0x29c>)
 80004f2:	f023 0302 	bic.w	r3, r3, #2
 80004f6:	6013      	str	r3, [r2, #0]

	//Configure the pins B8 and B9 for I2C -> both need to be AF and open drain value of 1101
	GPIOB->CRL &= ~(0xF << 24);
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <main+0x294>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <main+0x294>)
 80004fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000502:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 24);
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0x294>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <main+0x294>)
 800050a:	f043 6350 	orr.w	r3, r3, #218103808	; 0xd000000
 800050e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(0xF << 28);
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <main+0x294>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <main+0x294>)
 8000516:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= (0xD << 28);
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <main+0x294>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <main+0x294>)
 8000522:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
 8000526:	6013      	str	r3, [r2, #0]



	//Set the frequency of clock provided to cr2
	I2C1->CR2 |= ((HSI_SPEED/1000000));
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0x2a4>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <main+0x2a4>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6053      	str	r3, [r2, #4]


	//Configure the device address will maybe do
	I2C1->OAR1 |= (0x61 << 1);
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <main+0x2a4>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <main+0x2a4>)
 800053a:	f043 03c2 	orr.w	r3, r3, #194	; 0xc2
 800053e:	6093      	str	r3, [r2, #8]

	//The 14th bit of the OAR1 register must always be mainted by software as 1
	I2C1->OAR1 |= (1<<14);
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x2a4>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	e01a      	b.n	800057c <main+0x2a8>
 8000546:	bf00      	nop
 8000548:	40021018 	.word	0x40021018
 800054c:	4002101c 	.word	0x4002101c
 8000550:	40010008 	.word	0x40010008
 8000554:	40010004 	.word	0x40010004
 8000558:	40010400 	.word	0x40010400
 800055c:	40010408 	.word	0x40010408
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000e104 	.word	0xe000e104
 8000568:	40010c00 	.word	0x40010c00
 800056c:	40012c00 	.word	0x40012c00
 8000570:	40000400 	.word	0x40000400
 8000574:	40000800 	.word	0x40000800
 8000578:	40005400 	.word	0x40005400
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <main+0x31c>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6093      	str	r3, [r2, #8]

	//Set the CCR
	I2C1->CCR |= ((HSI_SPEED / (2*I2C_SCL_SPEED_SM)));
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <main+0x31c>)
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <main+0x31c>)
 800058a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800058e:	61d3      	str	r3, [r2, #28]

	//Set the trise value
	I2C1->TRISE =(((HSI_SPEED / 1000000) + 1) & 0x3F);
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <main+0x31c>)
 8000592:	2209      	movs	r2, #9
 8000594:	621a      	str	r2, [r3, #32]

	//Enable the I2C
	I2C1->CR1 |= 1;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <main+0x31c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <main+0x31c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]



	//Make clock halt = 0 in DS peripheal
	ds1307_write(0x0, DS1307_ADDR_SEC);
 80005a2:	2100      	movs	r1, #0
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f975 	bl	8000894 <ds1307_write>




	current_time.seconds = 34;
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <main+0x320>)
 80005ac:	2222      	movs	r2, #34	; 0x22
 80005ae:	701a      	strb	r2, [r3, #0]
	current_time.hours = 8;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <main+0x320>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	709a      	strb	r2, [r3, #2]
	current_time.minutes = 42;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <main+0x320>)
 80005b8:	222a      	movs	r2, #42	; 0x2a
 80005ba:	705a      	strb	r2, [r3, #1]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <main+0x320>)
 80005be:	2201      	movs	r2, #1
 80005c0:	70da      	strb	r2, [r3, #3]


	alarm_time.seconds = 0;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <main+0x324>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	alarm_time.minutes = 0;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0x324>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	705a      	strb	r2, [r3, #1]
	alarm_time.hours = 12;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x324>)
 80005d0:	220c      	movs	r2, #12
 80005d2:	709a      	strb	r2, [r3, #2]
	alarm_time.time_format = TIME_FORMAT_12HRS_PM;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <main+0x324>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_time(&current_time);
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x320>)
 80005dc:	f000 f986 	bl	80008ec <ds1307_set_current_time>
	ds1307_get_current_time(&current_time);
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x320>)
 80005e2:	f000 f9cc 	bl	800097e <ds1307_get_current_time>
 80005e6:	2300      	movs	r3, #0
//
//		}
//	}
//
//
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005400 	.word	0x40005400
 80005f4:	20000020 	.word	0x20000020
 80005f8:	20000024 	.word	0x20000024

080005fc <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR =  (uint32_t *)(0x40010414);
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <EXTI0_IRQHandler+0x30>)
 8000604:	607b      	str	r3, [r7, #4]
	//Set debounce time
	buttonModeLastDebounceTime = TIM1->CNT;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <EXTI0_IRQHandler+0x34>)
 8000608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <EXTI0_IRQHandler+0x38>)
 800060c:	6013      	str	r3, [r2, #0]
	buttonModeProcessed = 0;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <EXTI0_IRQHandler+0x3c>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
	//Clear interupt
	*EXTI_PR |= (1 << 0);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f043 0201 	orr.w	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40010414 	.word	0x40010414
 8000630:	40012c00 	.word	0x40012c00
 8000634:	2000002c 	.word	0x2000002c
 8000638:	20000028 	.word	0x20000028

0800063c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint32_t *EXTI_PR =  (uint32_t *)(0x40010414);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <EXTI1_IRQHandler+0x30>)
 8000644:	607b      	str	r3, [r7, #4]
	//Set debounce time
	buttonSetLastDebounceTime = TIM2->CNT;
 8000646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064c:	4a08      	ldr	r2, [pc, #32]	; (8000670 <EXTI1_IRQHandler+0x34>)
 800064e:	6013      	str	r3, [r2, #0]
	buttonSetProcessed = 0;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <EXTI1_IRQHandler+0x38>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
	//Clear interupt
	*EXTI_PR |= (1 << 1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f043 0202 	orr.w	r2, r3, #2
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40010414 	.word	0x40010414
 8000670:	20000034 	.word	0x20000034
 8000674:	20000030 	.word	0x20000030

08000678 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//Check if time has been updated within last cycle if so new time should be set
	if((timeSet = 1) && (alarmClockState == ALARM_CLOCK_SET))
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <TIM3_IRQHandler+0x28>)
 800067e:	2201      	movs	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <TIM3_IRQHandler+0x2c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d105      	bne.n	8000696 <TIM3_IRQHandler+0x1e>
	{
		ds1307_set_current_time(&current_time);
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <TIM3_IRQHandler+0x30>)
 800068c:	f000 f92e 	bl	80008ec <ds1307_set_current_time>
		timeSet = 0;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <TIM3_IRQHandler+0x28>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]

	//Handle alarm checking


	//Clear the interupt
	TIM3->SR = 0;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <TIM3_IRQHandler+0x34>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000001d 	.word	0x2000001d
 80006a4:	2000001c 	.word	0x2000001c
 80006a8:	20000020 	.word	0x20000020
 80006ac:	40000400 	.word	0x40000400

080006b0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
//		(*NUM_4_SET)();
//
//	}
//	blinked = !blinked;

	TIM4->SR = 0;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <TIM4_IRQHandler+0x14>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40000800 	.word	0x40000800

080006c8 <binary_to_bcd>:
 */

#include "rtci2c.h"

uint8_t binary_to_bcd(uint8_t value)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	uint8_t tens, ones,bcd;
	//If only 1s bcd value is the same as binary
	bcd = value;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	d918      	bls.n	800070e <binary_to_bcd+0x46>
	{
		tens = value/10;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <binary_to_bcd+0x54>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	73bb      	strb	r3, [r7, #14]
		ones = value %10;
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <binary_to_bcd+0x54>)
 80006ec:	fba3 1302 	umull	r1, r3, r3, r2
 80006f0:	08d9      	lsrs	r1, r3, #3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((tens<<4)|ones );
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	b25a      	sxtb	r2, r3
 8000704:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000708:	4313      	orrs	r3, r2
 800070a:	b25b      	sxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
	}
	return bcd;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	cccccccd 	.word	0xcccccccd

08000720 <bcd_to_binary>:

uint8_t bcd_to_binary(uint8_t value)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	//Ones is bit 0:3, tens is bit 4:6
	//This function gets the amount of tens and ones
	uint8_t tens, ones,binary;
	tens = (value >>4);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	091b      	lsrs	r3, r3, #4
 800072e:	73fb      	strb	r3, [r7, #15]
	ones = (value & 0x0F);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	73bb      	strb	r3, [r7, #14]
	binary = tens*10 + ones;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	461a      	mov	r2, r3
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	7bbb      	ldrb	r3, [r7, #14]
 8000746:	4413      	add	r3, r2
 8000748:	737b      	strb	r3, [r7, #13]

	return (uint8_t)binary;
 800074a:	7b7b      	ldrb	r3, [r7, #13]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <I2C_SendData>:



void  I2C_SendData(uint8_t *pTXBuffer, uint32_t Len, uint8_t Sr)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	4613      	mov	r3, r2
 8000764:	71fb      	strb	r3, [r7, #7]

	//Generate START Condition
	I2C1->CR1 |= (1<< 8);
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <I2C_SendData+0xac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <I2C_SendData+0xac>)
 800076c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000770:	6013      	str	r3, [r2, #0]

	//Poll the SB flag in SR1. Hang program until its set
	while(!(I2C1->SR1 & 1));
 8000772:	bf00      	nop
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <I2C_SendData+0xac>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <I2C_SendData+0x1c>

	//Write the slave address to the DR
	//First bit must be cleared
	I2C1->DR = DS1307_DEVICE_ADDR << 1;
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <I2C_SendData+0xac>)
 8000782:	22d0      	movs	r2, #208	; 0xd0
 8000784:	611a      	str	r2, [r3, #16]

	//Poll the ADDR flag in SR1. Hang program until its set
	while(!(I2C1->SR1& (1<< 1)));
 8000786:	bf00      	nop
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <I2C_SendData+0xac>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f9      	beq.n	8000788 <I2C_SendData+0x30>

	//ADDR flag cleared by reading SR1 then SR2
	uint32_t dummyread;
	dummyread = I2C1->SR1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <I2C_SendData+0xac>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	617b      	str	r3, [r7, #20]
	dummyread = I2C1->SR2;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <I2C_SendData+0xac>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	617b      	str	r3, [r7, #20]
	(void)dummyread;

	//Send all bytes of data
	while(Len > 0)
 80007a0:	e010      	b.n	80007c4 <I2C_SendData+0x6c>
	{
		//Hang the program until TXE SR1 is set
		while(!(I2C1->SR1& (1<< 7)));
 80007a2:	bf00      	nop
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <I2C_SendData+0xac>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0f9      	beq.n	80007a4 <I2C_SendData+0x4c>

		//1. load the data in to DR
		I2C1->DR = *(pTXBuffer);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <I2C_SendData+0xac>)
 80007b6:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		Len--;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]

		//3. Increment the buffer address
		pTXBuffer++;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
	while(Len > 0)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1eb      	bne.n	80007a2 <I2C_SendData+0x4a>
	}


	//Wait for TXE and BTF to be set as they signal end of data transfer
	while(!(I2C1->SR1& (1<< 7)));
 80007ca:	bf00      	nop
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <I2C_SendData+0xac>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <I2C_SendData+0x74>
	while(!(I2C1->SR1& (1<< 2)));
 80007d8:	bf00      	nop
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <I2C_SendData+0xac>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <I2C_SendData+0x82>

	if(Sr == 0)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d105      	bne.n	80007f8 <I2C_SendData+0xa0>
		//Generate the stop condition
		I2C1->CR1 |= (1<< 9);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <I2C_SendData+0xac>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <I2C_SendData+0xac>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6013      	str	r3, [r2, #0]

}
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40005400 	.word	0x40005400

08000808 <I2C_RecieveData>:


void  I2C_RecieveData(uint8_t *pRXBuffer)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	//Generate START Condition
	I2C1->CR1 |= (1<< 8);
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <I2C_RecieveData+0x88>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <I2C_RecieveData+0x88>)
 8000816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081a:	6013      	str	r3, [r2, #0]

	//Enable ACKING
	I2C1->CR1 |= (1<< 10);
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <I2C_RecieveData+0x88>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <I2C_RecieveData+0x88>)
 8000822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000826:	6013      	str	r3, [r2, #0]

	//Poll the SB flag in SR1. Hang program until its set
	while(!(I2C1->SR1 & 1));
 8000828:	bf00      	nop
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <I2C_RecieveData+0x88>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <I2C_RecieveData+0x22>

	//Write the slave address to the DR last bit set 1 as write
	I2C1->DR = (DS1307_DEVICE_ADDR << 1) |(1);
 8000836:	4b16      	ldr	r3, [pc, #88]	; (8000890 <I2C_RecieveData+0x88>)
 8000838:	22d1      	movs	r2, #209	; 0xd1
 800083a:	611a      	str	r2, [r3, #16]

	//Poll the ADDR flag in SR1. Hang program until its set
	while(!(I2C1->SR1& (1<< 1)));
 800083c:	bf00      	nop
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <I2C_RecieveData+0x88>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <I2C_RecieveData+0x36>



	//ADDR flag cleared by reading SR1 then SR2
	uint32_t dummyread;
	dummyread = I2C1->SR1;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <I2C_RecieveData+0x88>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	60fb      	str	r3, [r7, #12]
	dummyread = I2C1->SR2;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <I2C_RecieveData+0x88>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	60fb      	str	r3, [r7, #12]
	(void)dummyread;


	//Disable acking
	I2C1->CR1 &= ~(1<< 10);
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <I2C_RecieveData+0x88>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <I2C_RecieveData+0x88>)
 800085c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000860:	6013      	str	r3, [r2, #0]

	//Generate the stop condition
	I2C1->CR1 |= (1<< 9);
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <I2C_RecieveData+0x88>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <I2C_RecieveData+0x88>)
 8000868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086c:	6013      	str	r3, [r2, #0]

	//Wait until RXNE is set signifing data is received
	while(!(I2C1->SR1& (1<< 6)));
 800086e:	bf00      	nop
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <I2C_RecieveData+0x88>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f9      	beq.n	8000870 <I2C_RecieveData+0x68>



	//Read the data
	*pRXBuffer = I2C1->DR;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <I2C_RecieveData+0x88>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	701a      	strb	r2, [r3, #0]

}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40005400 	.word	0x40005400

08000894 <ds1307_write>:

void ds1307_write(uint8_t value,uint8_t reg_addr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	//Sends two bytes of data to enable the clock
	uint8_t tx[2];
	tx[0] = reg_addr;
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	737b      	strb	r3, [r7, #13]
	I2C_SendData(tx, 2,0);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff4f 	bl	8000758 <I2C_SendData>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <ds1307_read>:

uint8_t ds1307_read(uint8_t reg_addr)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	//Send address then receive data
	I2C_SendData(&reg_addr, 1,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff40 	bl	8000758 <I2C_SendData>
	I2C_RecieveData(&data);
 80008d8:	f107 030f 	add.w	r3, r7, #15
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff93 	bl	8000808 <I2C_RecieveData>
	return data;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]

}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <ds1307_set_current_time>:


void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fee5 	bl	80006c8 <binary_to_bcd>
 80008fe:	4603      	mov	r3, r0
 8000900:	73bb      	strb	r3, [r7, #14]
	//Ensure bit 7 is cleared to not turn of clock
	seconds &= ~(1<<7);
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000908:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds,DS1307_ADDR_SEC);
 800090a:	7bbb      	ldrb	r3, [r7, #14]
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffc0 	bl	8000894 <ds1307_write>

	//send minutes
	ds1307_write(binary_to_bcd(rtc_time->minutes),DS1307_ADDR_MIN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fed5 	bl	80006c8 <binary_to_bcd>
 800091e:	4603      	mov	r3, r0
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffb6 	bl	8000894 <ds1307_write>

	//set hours
	hrs = binary_to_bcd(rtc_time->hours);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fecb 	bl	80006c8 <binary_to_bcd>
 8000932:	4603      	mov	r3, r0
 8000934:	73fb      	strb	r3, [r7, #15]
	//Ensure bit 7 is cleared to not turn of clock
	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d104      	bne.n	8000948 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e011      	b.n	800096c <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094e:	73fb      	strb	r3, [r7, #15]
		hrs =(rtc_time->time_format ==TIME_FORMAT_12HRS_PM ) ? hrs | (1<<5) : hrs & ~(1<<5);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	78db      	ldrb	r3, [r3, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d104      	bne.n	8000962 <ds1307_set_current_time+0x76>
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	b2db      	uxtb	r3, r3
 8000960:	e003      	b.n	800096a <ds1307_set_current_time+0x7e>
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	f023 0320 	bic.w	r3, r3, #32
 8000968:	b2db      	uxtb	r3, r3
 800096a:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs,DS1307_ADDR_HRS);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff8f 	bl	8000894 <ds1307_write>
}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <ds1307_get_current_time>:
void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;
	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff9b 	bl	80008c2 <ds1307_read>
 800098c:	4603      	mov	r3, r0
 800098e:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000996:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fec0 	bl	8000720 <bcd_to_binary>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	701a      	strb	r2, [r3, #0]


	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff8a 	bl	80008c2 <ds1307_read>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff feb5 	bl	8000720 <bcd_to_binary>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	705a      	strb	r2, [r3, #1]

	hrs = ds1307_read(DS1307_ADDR_HRS);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff7f 	bl	80008c2 <ds1307_read>
 80009c4:	4603      	mov	r3, r0
 80009c6:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1<<6))
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00f      	beq.n	80009f2 <ds1307_get_current_time+0x74>
	{
		//12hr format
		//ever gives 12hr am (0) or 12hr pm (1)
		rtc_time->time_format = !((hrs & (1<< 5)) == 0) ;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf14      	ite	ne
 80009dc:	2301      	movne	r3, #1
 80009de:	2300      	moveq	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	70da      	strb	r2, [r3, #3]
		//clear 6th and 5th position
		hrs &= ~(0x3 << 5);
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80009ee:	73fb      	strb	r3, [r7, #15]
 80009f0:	e002      	b.n	80009f8 <ds1307_get_current_time+0x7a>
	}
	else
	{
		//24hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe90 	bl	8000720 <bcd_to_binary>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	709a      	strb	r2, [r3, #2]
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f000 f811 	bl	8000a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fc47 	bl	80002d4 <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8000a48:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a54:	08000acc 	.word	0x08000acc
  ldr r2, =_sbss
 8000a58:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a5c:	20000038 	.word	0x20000038

08000a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_2_IRQHandler>
	...

08000a64 <__libc_init_array>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	2600      	movs	r6, #0
 8000a68:	4d0c      	ldr	r5, [pc, #48]	; (8000a9c <__libc_init_array+0x38>)
 8000a6a:	4c0d      	ldr	r4, [pc, #52]	; (8000aa0 <__libc_init_array+0x3c>)
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	10a4      	asrs	r4, r4, #2
 8000a70:	42a6      	cmp	r6, r4
 8000a72:	d109      	bne.n	8000a88 <__libc_init_array+0x24>
 8000a74:	f000 f81a 	bl	8000aac <_init>
 8000a78:	2600      	movs	r6, #0
 8000a7a:	4d0a      	ldr	r5, [pc, #40]	; (8000aa4 <__libc_init_array+0x40>)
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <__libc_init_array+0x44>)
 8000a7e:	1b64      	subs	r4, r4, r5
 8000a80:	10a4      	asrs	r4, r4, #2
 8000a82:	42a6      	cmp	r6, r4
 8000a84:	d105      	bne.n	8000a92 <__libc_init_array+0x2e>
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8c:	4798      	blx	r3
 8000a8e:	3601      	adds	r6, #1
 8000a90:	e7ee      	b.n	8000a70 <__libc_init_array+0xc>
 8000a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a96:	4798      	blx	r3
 8000a98:	3601      	adds	r6, #1
 8000a9a:	e7f2      	b.n	8000a82 <__libc_init_array+0x1e>
 8000a9c:	08000ac4 	.word	0x08000ac4
 8000aa0:	08000ac4 	.word	0x08000ac4
 8000aa4:	08000ac4 	.word	0x08000ac4
 8000aa8:	08000ac8 	.word	0x08000ac8

08000aac <_init>:
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	bf00      	nop
 8000ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab2:	bc08      	pop	{r3}
 8000ab4:	469e      	mov	lr, r3
 8000ab6:	4770      	bx	lr

08000ab8 <_fini>:
 8000ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aba:	bf00      	nop
 8000abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000abe:	bc08      	pop	{r3}
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	4770      	bx	lr
